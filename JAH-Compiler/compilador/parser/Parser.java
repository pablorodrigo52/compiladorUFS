/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AInicioProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce ATerminalPdeclaracao */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AVariaveisDeclaracao */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list);
            }
            break;
            case 3: /* reduce AConstanteDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AVariasVariaveisVar */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AUmaVariavelVar */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AVariavelVarOuVetor */
            {
                ArrayList<Object> list = new6();
                push(goTo(4), list);
            }
            break;
            case 7: /* reduce AVetorVarOuVetor */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list);
            }
            break;
            case 8: /* reduce AUmIdentificadorPosicao */
            {
                ArrayList<Object> list = new8();
                push(goTo(5), list);
            }
            break;
            case 9: /* reduce AUmInteiroPosicao */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list);
            }
            break;
            case 10: /* reduce AAtribuicaoVariavelComando */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list);
            }
            break;
            case 11: /* reduce AComandoLeiaComando */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list);
            }
            break;
            case 12: /* reduce AComandoEscrevaComando */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list);
            }
            break;
            case 13: /* reduce AComandoSeComando */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AComandoAvalieComando */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AComandoEnquanto$Acomandocondicionalcomandos11Comando */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AComandoEnquanto$Acomandocondicionalcomandos21$VariosComandos1Comando */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AComandoRepita$Acomandocondicionalcomandos11Comando */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AComandoRepita$Acomandocondicionalcomandos21$VariosComandos1Comando */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AComandoPara1$Acomandocondicionalcomandos11Comando */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce AComandoPara1$Acomandocondicionalcomandos21$VariosComandos1Comando */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list);
            }
            break;
            case 21: /* reduce AComandoPasso$Acomandocondicionalcomandos11Comando */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list);
            }
            break;
            case 22: /* reduce AComandoPasso$Acomandocondicionalcomandos21$VariosComandos1Comando */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce AVariasExpressoesExpEscreva */
            {
                ArrayList<Object> list = new23();
                push(goTo(7), list);
            }
            break;
            case 24: /* reduce AUmaExpressaoExpEscreva */
            {
                ArrayList<Object> list = new24();
                push(goTo(7), list);
            }
            break;
            case 25: /* reduce AExpOuExplogica */
            {
                ArrayList<Object> list = new25();
                push(goTo(8), list);
            }
            break;
            case 26: /* reduce ATerminalPcomando */
            {
                ArrayList<Object> list = new26();
                push(goTo(9), list);
            }
            break;
            case 27: /* reduce ATerminalPcomandoCaso */
            {
                ArrayList<Object> list = new27();
                push(goTo(10), list);
            }
            break;
            case 28: /* reduce ATerminalPcomandoPara */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce ACondicaoSeCondicaoSe */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list);
            }
            break;
            case 30: /* reduce AAcausasecausase1$Acomandocondicionalcomandos11CausaSe */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AAcausasecausase1$Acomandocondicionalcomandos21$VariosComandos1CausaSe */
            {
                ArrayList<Object> list = new31();
                push(goTo(13), list);
            }
            break;
            case 32: /* reduce AAcausasecausase2$Acomandocondicionalcomandos11CausaSe */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list);
            }
            break;
            case 33: /* reduce AAcausasecausase2$Acomandocondicionalcomandos21$VariosComandos1CausaSe */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list);
            }
            break;
            case 34: /* reduce AComandoSenaoSe$Acomandocondicionalcomandos11ComandoSenao */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AComandoSenaoSe$Acomandocondicionalcomandos21$VariosComandos1ComandoSenao */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list);
            }
            break;
            case 36: /* reduce AComandoSenaoAvalie$Acomandocondicionalcomandos11ComandoSenao */
            {
                ArrayList<Object> list = new36();
                push(goTo(14), list);
            }
            break;
            case 37: /* reduce AComandoSenaoAvalie$Acomandocondicionalcomandos21$VariosComandos1ComandoSenao */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce ACondicaoAvalie */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce AAcasosavalie4CasosAvalie */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list);
            }
            break;
            case 40: /* reduce AVariosCasesCondComandoCasos */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list);
            }
            break;
            case 41: /* reduce AComandoCase$Acomandocondicionalcomandos11ComandoCaso */
            {
                ArrayList<Object> list = new41();
                push(goTo(18), list);
            }
            break;
            case 42: /* reduce AComandoCase$Acomandocondicionalcomandos21$VariosComandos1ComandoCaso */
            {
                ArrayList<Object> list = new42();
                push(goTo(18), list);
            }
            break;
            case 43: /* reduce AVariosComandosParaCondComandoPara */
            {
                ArrayList<Object> list = new43();
                push(goTo(19), list);
            }
            break;
            case 44: /* reduce AComandoParaComandoPara */
            {
                ArrayList<Object> list = new44();
                push(goTo(20), list);
            }
            break;
            case 45: /* reduce AExpressaoExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(21), list);
            }
            break;
            case 46: /* reduce AExpLogicaExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(21), list);
            }
            break;
            case 47: /* reduce ASomaExpressao */
            {
                ArrayList<Object> list = new47();
                push(goTo(22), list);
            }
            break;
            case 48: /* reduce ASubExpressao */
            {
                ArrayList<Object> list = new48();
                push(goTo(22), list);
            }
            break;
            case 49: /* reduce AMultExpressao */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce ADivExpressao */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce ATermoExpressao */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce AFinalTermo */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AValorAninahdoExpressaoFinal */
            {
                ArrayList<Object> list = new53();
                push(goTo(24), list);
            }
            break;
            case 54: /* reduce AUmaVariavelExpressaoFinal */
            {
                ArrayList<Object> list = new54();
                push(goTo(24), list);
            }
            break;
            case 55: /* reduce AVariavelNegativaExpressaoFinal */
            {
                ArrayList<Object> list = new55();
                push(goTo(24), list);
            }
            break;
            case 56: /* reduce AValorFinalExpressaoFinal */
            {
                ArrayList<Object> list = new56();
                push(goTo(24), list);
            }
            break;
            case 57: /* reduce AEExpLogica */
            {
                ArrayList<Object> list = new57();
                push(goTo(25), list);
            }
            break;
            case 58: /* reduce AOuExpLogica */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list);
            }
            break;
            case 59: /* reduce AXorExpLogica */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce ANaoExpLogica */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce AExpAninhadaExpLogica */
            {
                ArrayList<Object> list = new61();
                push(goTo(25), list);
            }
            break;
            case 62: /* reduce ATermoLogicoExpLogica */
            {
                ArrayList<Object> list = new62();
                push(goTo(25), list);
            }
            break;
            case 63: /* reduce AFatorLogicoTermoLogico */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list);
            }
            break;
            case 64: /* reduce AIgualFatorLogico */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce AMaiorFatorLogico */
            {
                ArrayList<Object> list = new65();
                push(goTo(27), list);
            }
            break;
            case 66: /* reduce AMenorFatorLogico */
            {
                ArrayList<Object> list = new66();
                push(goTo(27), list);
            }
            break;
            case 67: /* reduce AMaiorqFatorLogico */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list);
            }
            break;
            case 68: /* reduce AMenorqFatorLogico */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce ADiferenteFatorLogico */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce ATintTipo */
            {
                ArrayList<Object> list = new70();
                push(goTo(28), list);
            }
            break;
            case 71: /* reduce ATfloatTipo */
            {
                ArrayList<Object> list = new71();
                push(goTo(28), list);
            }
            break;
            case 72: /* reduce ATstrTipo */
            {
                ArrayList<Object> list = new72();
                push(goTo(28), list);
            }
            break;
            case 73: /* reduce ATboolTipo */
            {
                ArrayList<Object> list = new73();
                push(goTo(28), list);
            }
            break;
            case 74: /* reduce AIntValor */
            {
                ArrayList<Object> list = new74();
                push(goTo(29), list);
            }
            break;
            case 75: /* reduce AFloatValor */
            {
                ArrayList<Object> list = new75();
                push(goTo(29), list);
            }
            break;
            case 76: /* reduce AStrValor */
            {
                ArrayList<Object> list = new76();
                push(goTo(29), list);
            }
            break;
            case 77: /* reduce ABoolValor */
            {
                ArrayList<Object> list = new77();
                push(goTo(29), list);
            }
            break;
            case 78: /* reduce ACharValor */
            {
                ArrayList<Object> list = new78();
                push(goTo(29), list);
            }
            break;
            case 79: /* reduce ATerminal$Pdeclaracao */
            {
                ArrayList<Object> list = new79();
                push(goTo(30), list);
            }
            break;
            case 80: /* reduce ANonTerminal$Pdeclaracao */
            {
                ArrayList<Object> list = new80();
                push(goTo(30), list);
            }
            break;
            case 81: /* reduce ATerminal$Pcomando */
            {
                ArrayList<Object> list = new81();
                push(goTo(31), list);
            }
            break;
            case 82: /* reduce ANonTerminal$Pcomando */
            {
                ArrayList<Object> list = new82();
                push(goTo(31), list);
            }
            break;
            case 83: /* reduce ATerminal$PcomandoCaso */
            {
                ArrayList<Object> list = new83();
                push(goTo(32), list);
            }
            break;
            case 84: /* reduce ANonTerminal$PcomandoCaso */
            {
                ArrayList<Object> list = new84();
                push(goTo(32), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AInicioProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TId tidNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        tidNode2 = (TId)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList5.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pprogNode1 = new AInicioProg(tidNode2, listNode4, listNode6);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce ATerminalPdeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AVariaveisDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        PVar pvarNode3;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AVariaveisDeclaracao(ptipoNode2, pvarNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AConstanteDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TId tidNode2;
        PValor pvalorNode3;
        tidNode2 = (TId)nodeArrayList2.get(0);
        pvalorNode3 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstanteDeclaracao(tidNode2, pvalorNode3);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVariasVariaveisVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVarOuVetor pvarouvetorNode2;
        PVar pvarNode3;
        pvarouvetorNode2 = (PVarOuVetor)nodeArrayList1.get(0);
        pvarNode3 = (PVar)nodeArrayList3.get(0);

        pvarNode1 = new AVariasVariaveisVar(pvarouvetorNode2, pvarNode3);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AUmaVariavelVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVarOuVetor pvarouvetorNode2;
        pvarouvetorNode2 = (PVarOuVetor)nodeArrayList1.get(0);

        pvarNode1 = new AUmaVariavelVar(pvarouvetorNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVariavelVarOuVetor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarOuVetor pvarouvetorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarouvetorNode1 = new AVariavelVarOuVetor(tidNode2);
        }
	nodeList.add(pvarouvetorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AVetorVarOuVetor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarOuVetor pvarouvetorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarouvetorNode1 = new AVetorVarOuVetor(tidNode2);
        }
	nodeList.add(pvarouvetorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AUmIdentificadorPosicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosicao pposicaoNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pposicaoNode1 = new AUmIdentificadorPosicao(tidNode2);
        }
	nodeList.add(pposicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AUmInteiroPosicao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PPosicao pposicaoNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pposicaoNode1 = new AUmInteiroPosicao(tinteiroNode2);
        }
	nodeList.add(pposicaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAtribuicaoVariavelComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        PExp pexpNode3;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoVariavelComando(pvarNode2, pexpNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AComandoLeiaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList3.get(0);

        pcomandoNode1 = new AComandoLeiaComando(pvarNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AComandoEscrevaComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PExpEscreva pexpescrevaNode2;
        pexpescrevaNode2 = (PExpEscreva)nodeArrayList3.get(0);

        pcomandoNode1 = new AComandoEscrevaComando(pexpescrevaNode2);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AComandoSeComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCondicaoSe pcondicaoseNode2;
        PCausaSe pcausaseNode3;
        pcondicaoseNode2 = (PCondicaoSe)nodeArrayList2.get(0);
        pcausaseNode3 = (PCausaSe)nodeArrayList4.get(0);

        pcomandoNode1 = new AComandoSeComando(pcondicaoseNode2, pcausaseNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AComandoAvalieComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCondicaoAvalie pcondicaoavalieNode2;
        PCasosAvalie pcasosavalieNode3;
        pcondicaoavalieNode2 = (PCondicaoAvalie)nodeArrayList2.get(0);
        pcasosavalieNode3 = (PCasosAvalie)nodeArrayList3.get(0);

        pcomandoNode1 = new AComandoAvalieComando(pcondicaoavalieNode2, pcasosavalieNode3);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AComandoEnquanto$Acomandocondicionalcomandos11Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCondicaoSe pcondicaoseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcondicaoseNode2 = (PCondicaoSe)nodeArrayList2.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList4.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AComandoEnquantoComando(pcondicaoseNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AComandoEnquanto$Acomandocondicionalcomandos21$VariosComandos1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PCondicaoSe pcondicaoseNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pcondicaoseNode2 = (PCondicaoSe)nodeArrayList2.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandoNode1 = new AComandoEnquantoComando(pcondicaoseNode2, listNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AComandoRepita$Acomandocondicionalcomandos11Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PCondicaoSe pcondicaoseNode4;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
        pcondicaoseNode4 = (PCondicaoSe)nodeArrayList4.get(0);

        pcomandoNode1 = new AComandoRepitaComando(listNode3, pcondicaoseNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AComandoRepita$Acomandocondicionalcomandos21$VariosComandos1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PCondicaoSe pcondicaoseNode4;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList3.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
        pcondicaoseNode4 = (PCondicaoSe)nodeArrayList5.get(0);

        pcomandoNode1 = new AComandoRepitaComando(listNode3, pcondicaoseNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AComandoPara1$Acomandocondicionalcomandos11Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInteiro tinteiroNode3;
        TInteiro tinteiroNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList4.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList6.get(0);
        {
            // Block
        PComando pcomandoNode5;
        pcomandoNode5 = (PComando)nodeArrayList8.get(0);
	if(pcomandoNode5 != null)
	{
	  listNode6.add(pcomandoNode5);
	}
        }

        pcomandoNode1 = new AComandoPara1Comando(pvarNode2, tinteiroNode3, tinteiroNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AComandoPara1$Acomandocondicionalcomandos21$VariosComandos1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInteiro tinteiroNode3;
        TInteiro tinteiroNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList4.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList6.get(0);
        {
            // Block
        PComando pcomandoNode5;
        pcomandoNode5 = (PComando)nodeArrayList9.get(0);
	if(pcomandoNode5 != null)
	{
	  listNode6.add(pcomandoNode5);
	}
        }

        pcomandoNode1 = new AComandoPara1Comando(pvarNode2, tinteiroNode3, tinteiroNode4, listNode6);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AComandoPasso$Acomandocondicionalcomandos11Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInteiro tinteiroNode3;
        TInteiro tinteiroNode4;
        TInteiro tinteiroNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList4.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList6.get(0);
        tinteiroNode5 = (TInteiro)nodeArrayList8.get(0);
        {
            // Block
        PComando pcomandoNode6;
        pcomandoNode6 = (PComando)nodeArrayList10.get(0);
	if(pcomandoNode6 != null)
	{
	  listNode7.add(pcomandoNode6);
	}
        }

        pcomandoNode1 = new AComandoPassoComando(pvarNode2, tinteiroNode3, tinteiroNode4, tinteiroNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AComandoPasso$Acomandocondicionalcomandos21$VariosComandos1Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TInteiro tinteiroNode3;
        TInteiro tinteiroNode4;
        TInteiro tinteiroNode5;
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        pvarNode2 = (PVar)nodeArrayList2.get(0);
        tinteiroNode3 = (TInteiro)nodeArrayList4.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList6.get(0);
        tinteiroNode5 = (TInteiro)nodeArrayList8.get(0);
        {
            // Block
        PComando pcomandoNode6;
        pcomandoNode6 = (PComando)nodeArrayList11.get(0);
	if(pcomandoNode6 != null)
	{
	  listNode7.add(pcomandoNode6);
	}
        }

        pcomandoNode1 = new AComandoPassoComando(pvarNode2, tinteiroNode3, tinteiroNode4, tinteiroNode5, listNode7);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVariasExpressoesExpEscreva */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpEscreva pexpescrevaNode1;
        {
            // Block
        PExpOuExplogica pexpouexplogicaNode2;
        PExpEscreva pexpescrevaNode3;
        pexpouexplogicaNode2 = (PExpOuExplogica)nodeArrayList1.get(0);
        pexpescrevaNode3 = (PExpEscreva)nodeArrayList3.get(0);

        pexpescrevaNode1 = new AVariasExpressoesExpEscreva(pexpouexplogicaNode2, pexpescrevaNode3);
        }
	nodeList.add(pexpescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AUmaExpressaoExpEscreva */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpEscreva pexpescrevaNode1;
        {
            // Block
        PExpOuExplogica pexpouexplogicaNode2;
        pexpouexplogicaNode2 = (PExpOuExplogica)nodeArrayList1.get(0);

        pexpescrevaNode1 = new AUmaExpressaoExpEscreva(pexpouexplogicaNode2);
        }
	nodeList.add(pexpescrevaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AExpOuExplogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpOuExplogica pexpouexplogicaNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList1.get(0);

        pexpouexplogicaNode1 = new AExpOuExplogica(pexpNode2);
        }
	nodeList.add(pexpouexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ATerminalPcomando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ATerminalPcomandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoCaso pcomandocasoNode1;
        pcomandocasoNode1 = (PComandoCaso)nodeArrayList1.get(0);
	if(pcomandocasoNode1 != null)
	{
	  listNode2.add(pcomandocasoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ATerminalPcomandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComandoPara pcomandoparaNode1;
        pcomandoparaNode1 = (PComandoPara)nodeArrayList1.get(0);
	if(pcomandoparaNode1 != null)
	{
	  listNode2.add(pcomandoparaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ACondicaoSeCondicaoSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondicaoSe pcondicaoseNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pcondicaoseNode1 = new ACondicaoSeCondicaoSe(pexplogicaNode2);
        }
	nodeList.add(pcondicaoseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAcausasecausase1$Acomandocondicionalcomandos11CausaSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCausaSe pcausaseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcausaseNode1 = new ACausaSeCausaSe(listNode3, null);
        }
	nodeList.add(pcausaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAcausasecausase1$Acomandocondicionalcomandos21$VariosComandos1CausaSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCausaSe pcausaseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        @SuppressWarnings("unused") Object nullNode4 = null;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcausaseNode1 = new ACausaSeCausaSe(listNode3, null);
        }
	nodeList.add(pcausaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AAcausasecausase2$Acomandocondicionalcomandos11CausaSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCausaSe pcausaseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandoSenao pcomandosenaoNode4;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
        pcomandosenaoNode4 = (PComandoSenao)nodeArrayList2.get(0);

        pcausaseNode1 = new ACausaSeCausaSe(listNode3, pcomandosenaoNode4);
        }
	nodeList.add(pcausaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AAcausasecausase2$Acomandocondicionalcomandos21$VariosComandos1CausaSe */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCausaSe pcausaseNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PComandoSenao pcomandosenaoNode4;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
        pcomandosenaoNode4 = (PComandoSenao)nodeArrayList3.get(0);

        pcausaseNode1 = new ACausaSeCausaSe(listNode3, pcomandosenaoNode4);
        }
	nodeList.add(pcausaseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AComandoSenaoSe$Acomandocondicionalcomandos11ComandoSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSenao pcomandosenaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcomandosenaoNode1 = new AComandoSenaoSeComandoSenao(listNode3);
        }
	nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AComandoSenaoSe$Acomandocondicionalcomandos21$VariosComandos1ComandoSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSenao pcomandosenaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList3.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcomandosenaoNode1 = new AComandoSenaoSeComandoSenao(listNode3);
        }
	nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AComandoSenaoAvalie$Acomandocondicionalcomandos11ComandoSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSenao pcomandosenaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList3.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcomandosenaoNode1 = new AComandoSenaoAvalieComandoSenao(listNode3);
        }
	nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AComandoSenaoAvalie$Acomandocondicionalcomandos21$VariosComandos1ComandoSenao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoSenao pcomandosenaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList4.get(0);
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }

        pcomandosenaoNode1 = new AComandoSenaoAvalieComandoSenao(listNode3);
        }
	nodeList.add(pcomandosenaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ACondicaoAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondicaoAvalie pcondicaoavalieNode1;
        {
            // Block
        PExp pexpNode2;
        pexpNode2 = (PExp)nodeArrayList2.get(0);

        pcondicaoavalieNode1 = new ACondicaoAvalie(pexpNode2);
        }
	nodeList.add(pcondicaoavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AAcasosavalie4CasosAvalie */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCasosAvalie pcasosavalieNode1;
        {
            // Block
        PCondComandoCasos pcondcomandocasosNode2;
        PComandoSenao pcomandosenaoNode3;
        pcondcomandocasosNode2 = (PCondComandoCasos)nodeArrayList1.get(0);
        pcomandosenaoNode3 = (PComandoSenao)nodeArrayList2.get(0);

        pcasosavalieNode1 = new ACasosAvalie(pcondcomandocasosNode2, pcomandosenaoNode3);
        }
	nodeList.add(pcasosavalieNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AVariosCasesCondComandoCasos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondComandoCasos pcondcomandocasosNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcondcomandocasosNode1 = new AVariosCasesCondComandoCasos(listNode3);
        }
	nodeList.add(pcondcomandocasosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AComandoCase$Acomandocondicionalcomandos11ComandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoCaso pcomandocasoNode1;
        {
            // Block
        PValor pvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList4.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandocasoNode1 = new AComandoCaseComandoCaso(pvalorNode2, listNode4);
        }
	nodeList.add(pcomandocasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AComandoCase$Acomandocondicionalcomandos21$VariosComandos1ComandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoCaso pcomandocasoNode1;
        {
            // Block
        PValor pvalorNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalorNode2 = (PValor)nodeArrayList2.get(0);
        {
            // Block
        PComando pcomandoNode3;
        pcomandoNode3 = (PComando)nodeArrayList5.get(0);
	if(pcomandoNode3 != null)
	{
	  listNode4.add(pcomandoNode3);
	}
        }

        pcomandocasoNode1 = new AComandoCaseComandoCaso(pvalorNode2, listNode4);
        }
	nodeList.add(pcomandocasoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AVariosComandosParaCondComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondComandoPara pcondcomandoparaNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcondcomandoparaNode1 = new AVariosComandosParaCondComandoPara(listNode3);
        }
	nodeList.add(pcondcomandoparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AComandoParaComandoPara */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandoPara pcomandoparaNode1;
        {
            // Block
        PComando pcomandoNode2;
        pcomandoNode2 = (PComando)nodeArrayList1.get(0);

        pcomandoparaNode1 = new AComandoParaComandoPara(pcomandoNode2);
        }
	nodeList.add(pcomandoparaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AExpressaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);

        pexpNode1 = new AExpressaoExp(pexpressaoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpLogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLogicaExp(pexplogicaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ASomaExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new ASomaExpressao(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ASubExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new ASubExpressao(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AMultExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new AMultExpressao(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ADivExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pexpressaoNode1 = new ADivExpressao(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ATermoExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PTermo ptermoNode2;
        ptermoNode2 = (PTermo)nodeArrayList1.get(0);

        pexpressaoNode1 = new ATermoExpressao(ptermoNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AFinalTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermo ptermoNode1;
        {
            // Block
        PExpressaoFinal pexpressaofinalNode2;
        pexpressaofinalNode2 = (PExpressaoFinal)nodeArrayList1.get(0);

        ptermoNode1 = new AFinalTermo(pexpressaofinalNode2);
        }
	nodeList.add(ptermoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AValorAninahdoExpressaoFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoFinal pexpressaofinalNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList2.get(0);

        pexpressaofinalNode1 = new AValorAninahdoExpressaoFinal(pexpressaoNode2);
        }
	nodeList.add(pexpressaofinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AUmaVariavelExpressaoFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoFinal pexpressaofinalNode1;
        {
            // Block
        PVarOuVetor pvarouvetorNode2;
        pvarouvetorNode2 = (PVarOuVetor)nodeArrayList1.get(0);

        pexpressaofinalNode1 = new AUmaVariavelExpressaoFinal(pvarouvetorNode2);
        }
	nodeList.add(pexpressaofinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AVariavelNegativaExpressaoFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoFinal pexpressaofinalNode1;
        {
            // Block
        PExpressaoFinal pexpressaofinalNode2;
        pexpressaofinalNode2 = (PExpressaoFinal)nodeArrayList2.get(0);

        pexpressaofinalNode1 = new AVariavelNegativaExpressaoFinal(pexpressaofinalNode2);
        }
	nodeList.add(pexpressaofinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AValorFinalExpressaoFinal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoFinal pexpressaofinalNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pexpressaofinalNode1 = new AValorFinalExpressaoFinal(pvalorNode2);
        }
	nodeList.add(pexpressaofinalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PTermoLogico ptermologicoNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        ptermologicoNode3 = (PTermoLogico)nodeArrayList3.get(0);

        pexplogicaNode1 = new AEExpLogica(pexplogicaNode2, ptermologicoNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AOuExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PTermoLogico ptermologicoNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        ptermologicoNode3 = (PTermoLogico)nodeArrayList3.get(0);

        pexplogicaNode1 = new AOuExpLogica(pexplogicaNode2, ptermologicoNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AXorExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        PTermoLogico ptermologicoNode3;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);
        ptermologicoNode3 = (PTermoLogico)nodeArrayList3.get(0);

        pexplogicaNode1 = new AXorExpLogica(pexplogicaNode2, ptermologicoNode3);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ANaoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PTermoLogico ptermologicoNode2;
        ptermologicoNode2 = (PTermoLogico)nodeArrayList2.get(0);

        pexplogicaNode1 = new ANaoExpLogica(ptermologicoNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpAninhadaExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList2.get(0);

        pexplogicaNode1 = new AExpAninhadaExpLogica(pexplogicaNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATermoLogicoExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PTermoLogico ptermologicoNode2;
        ptermologicoNode2 = (PTermoLogico)nodeArrayList1.get(0);

        pexplogicaNode1 = new ATermoLogicoExpLogica(ptermologicoNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AFatorLogicoTermoLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTermoLogico ptermologicoNode1;
        {
            // Block
        PFatorLogico pfatorlogicoNode2;
        pfatorlogicoNode2 = (PFatorLogico)nodeArrayList1.get(0);

        ptermologicoNode1 = new AFatorLogicoTermoLogico(pfatorlogicoNode2);
        }
	nodeList.add(ptermologicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AIgualFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new AIgualFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AMaiorFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new AMaiorFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AMenorFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new AMenorFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AMaiorqFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new AMaiorqFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AMenorqFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new AMenorqFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ADiferenteFatorLogico */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorLogico pfatorlogicoNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        PTermo ptermoNode3;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);
        ptermoNode3 = (PTermo)nodeArrayList3.get(0);

        pfatorlogicoNode1 = new ADiferenteFatorLogico(pexpressaoNode2, ptermoNode3);
        }
	nodeList.add(pfatorlogicoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ATintTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipointeiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipointeiro)nodeArrayList1.get(0);

        ptipoNode1 = new ATintTipo(ttipointeiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATfloatTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTiporeal ttiporealNode2;
        ttiporealNode2 = (TTiporeal)nodeArrayList1.get(0);

        ptipoNode1 = new ATfloatTipo(ttiporealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATstrTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipocaractere ttipocaractereNode2;
        ttipocaractereNode2 = (TTipocaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ATstrTipo(ttipocaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATboolTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipobooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipobooleano)nodeArrayList1.get(0);

        ptipoNode1 = new ATboolTipo(ttipobooleanoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new AIntValor(tinteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFloatValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pvalorNode1 = new AFloatValor(trealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStrValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ABoolValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TBooleano tbooleanoNode2;
        tbooleanoNode2 = (TBooleano)nodeArrayList1.get(0);

        pvalorNode1 = new ABoolValor(tbooleanoNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ACharValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TCaractere tcaractereNode2;
        tcaractereNode2 = (TCaractere)nodeArrayList1.get(0);

        pvalorNode1 = new ACharValor(tcaractereNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce ATerminal$Pdeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce ANonTerminal$Pdeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ATerminal$Pcomando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce ANonTerminal$Pcomando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce ATerminal$PcomandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ANonTerminal$PcomandoCaso */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {18, SHIFT, 1}, },
			{{-1, ERROR, 1}, {60, SHIFT, 3}, },
			{{-1, ERROR, 2}, {66, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, },
			{{-1, ERROR, 4}, {21, SHIFT, 5}, {42, SHIFT, 6}, {43, SHIFT, 7}, {44, SHIFT, 8}, {45, SHIFT, 9}, },
			{{-1, ERROR, 5}, {60, SHIFT, 14}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 12}, {51, SHIFT, 15}, },
			{{-1, ERROR, 13}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {21, SHIFT, 5}, {42, SHIFT, 6}, {43, SHIFT, 7}, {44, SHIFT, 8}, {45, SHIFT, 9}, {60, SHIFT, 23}, },
			{{-1, ERROR, 14}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 15}, {60, SHIFT, 23}, },
			{{-1, ERROR, 16}, {53, SHIFT, 37}, },
			{{-1, ERROR, 17}, {53, SHIFT, 37}, },
			{{-1, ERROR, 18}, {60, SHIFT, 23}, },
			{{-1, ERROR, 19}, {53, SHIFT, 41}, },
			{{-1, ERROR, 20}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 21}, {53, SHIFT, 45}, },
			{{-1, ERROR, 22}, {53, SHIFT, 46}, },
			{{-1, REDUCE, 6}, {55, SHIFT, 47}, },
			{{-1, REDUCE, 80}, },
			{{-1, ERROR, 25}, {57, SHIFT, 48}, },
			{{-1, REDUCE, 5}, {46, SHIFT, 49}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 81}, },
			{{-1, ERROR, 29}, {1, SHIFT, 50}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 78}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 35}, {48, SHIFT, 52}, },
			{{-1, ERROR, 36}, {48, SHIFT, 53}, },
			{{-1, ERROR, 37}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 38}, {4, SHIFT, 65}, },
			{{-1, ERROR, 39}, {24, SHIFT, 66}, },
			{{-1, ERROR, 40}, {9, SHIFT, 67}, },
			{{-1, ERROR, 41}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 42}, {14, SHIFT, 71}, },
			{{-1, REDUCE, 26}, {17, SHIFT, 77}, },
			{{-1, ERROR, 44}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 45}, {60, SHIFT, 23}, },
			{{-1, ERROR, 46}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 47}, {60, SHIFT, 83}, {61, SHIFT, 84}, },
			{{-1, ERROR, 48}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 49}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 54}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 55}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 56}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 58}, {27, SHIFT, 93}, {28, SHIFT, 94}, {29, SHIFT, 95}, {30, SHIFT, 96}, {31, SHIFT, 97}, {32, SHIFT, 98}, {33, SHIFT, 99}, {34, SHIFT, 100}, {35, SHIFT, 101}, {36, SHIFT, 102}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, ERROR, 61}, {39, SHIFT, 103}, {40, SHIFT, 104}, {41, SHIFT, 105}, {54, SHIFT, 106}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 65}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 66}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 67}, {61, SHIFT, 112}, },
			{{-1, ERROR, 68}, {54, SHIFT, 113}, },
			{{-1, REDUCE, 45}, {27, SHIFT, 93}, {28, SHIFT, 94}, {29, SHIFT, 95}, {30, SHIFT, 96}, {31, SHIFT, 97}, {32, SHIFT, 98}, {33, SHIFT, 99}, {34, SHIFT, 100}, {35, SHIFT, 101}, {36, SHIFT, 102}, },
			{{-1, REDUCE, 46}, {39, SHIFT, 103}, {40, SHIFT, 104}, {41, SHIFT, 105}, },
			{{-1, ERROR, 71}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, REDUCE, 83}, },
			{{-1, ERROR, 73}, {13, SHIFT, 115}, },
			{{-1, ERROR, 74}, {5, SHIFT, 116}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 40}, {14, SHIFT, 71}, },
			{{-1, ERROR, 77}, {53, SHIFT, 37}, },
			{{-1, REDUCE, 26}, {17, SHIFT, 120}, },
			{{-1, ERROR, 79}, {54, SHIFT, 121}, },
			{{-1, ERROR, 80}, {54, SHIFT, 122}, },
			{{-1, REDUCE, 24}, {46, SHIFT, 123}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 85}, {56, SHIFT, 124}, },
			{{-1, ERROR, 86}, {48, SHIFT, 125}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 88}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 91}, {27, SHIFT, 93}, {28, SHIFT, 94}, {29, SHIFT, 95}, {30, SHIFT, 96}, {31, SHIFT, 97}, {32, SHIFT, 98}, {33, SHIFT, 99}, {34, SHIFT, 100}, {35, SHIFT, 101}, {36, SHIFT, 102}, {54, SHIFT, 127}, },
			{{-1, ERROR, 92}, {39, SHIFT, 103}, {40, SHIFT, 104}, {41, SHIFT, 105}, {54, SHIFT, 128}, },
			{{-1, ERROR, 93}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 94}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 95}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 96}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 97}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 98}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 99}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 100}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 101}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 102}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 103}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 104}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, ERROR, 105}, {36, SHIFT, 54}, {53, SHIFT, 88}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 30}, {5, SHIFT, 116}, },
			{{-1, ERROR, 108}, {3, SHIFT, 143}, },
			{{-1, ERROR, 109}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 26}, {7, SHIFT, 145}, },
			{{-1, ERROR, 111}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 112}, {10, SHIFT, 147}, {17, SHIFT, 148}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 114}, {51, SHIFT, 149}, },
			{{-1, ERROR, 115}, {48, SHIFT, 150}, },
			{{-1, ERROR, 116}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {51, SHIFT, 151}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 84}, },
			{{-1, ERROR, 119}, {48, SHIFT, 154}, },
			{{-1, ERROR, 120}, {53, SHIFT, 37}, },
			{{-1, ERROR, 121}, {48, SHIFT, 156}, },
			{{-1, ERROR, 122}, {48, SHIFT, 157}, },
			{{-1, ERROR, 123}, {36, SHIFT, 54}, {38, SHIFT, 55}, {53, SHIFT, 56}, {60, SHIFT, 23}, {61, SHIFT, 30}, {62, SHIFT, 31}, {63, SHIFT, 32}, {64, SHIFT, 33}, {65, SHIFT, 34}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 126}, {33, SHIFT, 99}, {34, SHIFT, 100}, {35, SHIFT, 101}, {36, SHIFT, 102}, {54, SHIFT, 127}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 143}, {48, SHIFT, 159}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 31}, {5, SHIFT, 116}, },
			{{-1, ERROR, 145}, {48, SHIFT, 161}, },
			{{-1, REDUCE, 26}, {7, SHIFT, 162}, },
			{{-1, ERROR, 147}, {61, SHIFT, 163}, },
			{{-1, ERROR, 148}, {61, SHIFT, 164}, },
			{{-1, ERROR, 149}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 151}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 34}, {13, REDUCE, 34}, },
			{{-1, ERROR, 153}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 155}, {48, SHIFT, 170}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 162}, {48, SHIFT, 171}, },
			{{-1, ERROR, 163}, {17, SHIFT, 172}, },
			{{-1, ERROR, 164}, {24, SHIFT, 173}, },
			{{-1, REDUCE, 26}, {5, REDUCE, 41}, {14, REDUCE, 41}, },
			{{-1, ERROR, 166}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 36}, {13, REDUCE, 36}, },
			{{-1, ERROR, 168}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 35}, {13, REDUCE, 35}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 172}, {61, SHIFT, 176}, },
			{{-1, ERROR, 173}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 26}, {5, REDUCE, 42}, {14, REDUCE, 42}, },
			{{-1, REDUCE, 26}, {3, REDUCE, 37}, {13, REDUCE, 37}, },
			{{-1, ERROR, 176}, {24, SHIFT, 179}, },
			{{-1, REDUCE, 26}, {11, SHIFT, 180}, },
			{{-1, ERROR, 178}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 179}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, ERROR, 180}, {48, SHIFT, 184}, },
			{{-1, REDUCE, 26}, {11, SHIFT, 185}, },
			{{-1, REDUCE, 26}, {11, SHIFT, 186}, },
			{{-1, ERROR, 183}, {2, SHIFT, 16}, {6, SHIFT, 17}, {8, SHIFT, 18}, {12, SHIFT, 19}, {16, SHIFT, 20}, {19, SHIFT, 21}, {20, SHIFT, 22}, {60, SHIFT, 23}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 185}, {48, SHIFT, 188}, },
			{{-1, ERROR, 186}, {48, SHIFT, 189}, },
			{{-1, REDUCE, 26}, {11, SHIFT, 190}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 190}, {48, SHIFT, 191}, },
			{{-1, REDUCE, 22}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, {13, 24}, },
			{{-1, 11}, },
			{{-1, 25}, {15, 36}, {18, 40}, {45, 79}, {49, 87}, },
			{{-1, 57}, {13, 26}, {15, 26}, {18, 26}, {20, 26}, {29, 26}, {44, 26}, {45, 26}, {49, 26}, {65, 26}, {66, 26}, {109, 26}, {111, 26}, {116, 26}, {149, 26}, {151, 26}, {153, 26}, {166, 26}, {168, 26}, {173, 26}, {178, 26}, {179, 26}, {183, 26}, },
			{{-1, 85}, },
			{{-1, 27}, {20, 43}, {44, 78}, {65, 107}, {66, 110}, {109, 144}, {111, 146}, {116, 152}, {149, 165}, {151, 167}, {153, 169}, {166, 174}, {168, 175}, {173, 177}, {178, 181}, {179, 182}, {183, 187}, },
			{{-1, 80}, {123, 158}, },
			{{-1, 81}, },
			{{-1, 28}, {29, 51}, {44, 51}, {109, 51}, {111, 51}, {153, 51}, {166, 51}, {168, 51}, {178, 51}, {183, 51}, },
			{{-1, 72}, {76, 118}, },
			{{-1, -1}, },
			{{-1, 38}, {17, 39}, {77, 119}, {120, 155}, },
			{{-1, 108}, },
			{{-1, 117}, {107, 142}, {144, 160}, },
			{{-1, 42}, },
			{{-1, 73}, },
			{{-1, 74}, },
			{{-1, 75}, },
			{{-1, -1}, },
			{{-1, -1}, },
			{{-1, 82}, {41, 68}, {48, 86}, },
			{{-1, 58}, {41, 69}, {46, 69}, {48, 69}, {56, 91}, {88, 126}, {123, 69}, },
			{{-1, 59}, {93, 129}, {94, 130}, {95, 131}, {96, 132}, {97, 133}, {98, 134}, {99, 135}, {100, 136}, {101, 137}, {102, 138}, },
			{{-1, 60}, {54, 89}, },
			{{-1, 70}, {37, 61}, {56, 92}, },
			{{-1, 62}, {55, 90}, {103, 139}, {104, 140}, {105, 141}, },
			{{-1, 63}, },
			{{-1, 12}, },
			{{-1, 64}, {14, 35}, {71, 114}, },
			{{-1, 13}, },
			{{-1, 29}, {20, 44}, {65, 109}, {66, 111}, {116, 153}, {149, 166}, {151, 168}, {173, 178}, {179, 183}, },
			{{-1, 76}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: programa",
			"expecting: id",
			"expecting: EOF",
			"expecting: inicio",
			"expecting: 'const', 'inteiro', 'real', 'caractere', 'booleano'",
			"expecting: ':'",
			"expecting: 'se', 'enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', 'const', 'inteiro', 'real', 'caractere', 'booleano', id",
			"expecting: inteiro, real, caractere, string, booleano",
			"expecting: '('",
			"expecting: 'se', 'enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', id",
			"expecting: 'de', diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, xor, virgula, ';', ')', '[', ':='",
			"expecting: ':='",
			"expecting: 'de', virgula, ';', ')', ':='",
			"expecting: fim, 'se', 'enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', id",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, xor, virgula, ';', ':', ')'",
			"expecting: ';'",
			"expecting: '-', nao, '(', id, inteiro, real, caractere, string, booleano",
			"expecting: 'entao'",
			"expecting: 'faca'",
			"expecting: 'de'",
			"expecting: 'caso'",
			"expecting: 'se', 'enquanto', 'para', 'avalie', 'repita', 'ate', 'leia', 'escreva', id",
			"expecting: id, inteiro",
			"expecting: '-', '(', id, inteiro, real, caractere, string, booleano",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, xor, virgula, ';', ')'",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-'",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', virgula, ';', ')'",
			"expecting: e, ou, xor, ')'",
			"expecting: e, ou, xor, virgula, ';', ')'",
			"expecting: inteiro",
			"expecting: ')'",
			"expecting: 'senao', 'caso'",
			"expecting: 'fim avalie'",
			"expecting: 'senao'",
			"expecting: virgula, ')'",
			"expecting: ']'",
			"expecting: 'de', ';', ')', ':='",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', ')'",
			"expecting: 'entao', 'faca', ';'",
			"expecting: 'se', 'fim se', 'senao', 'enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', id",
			"expecting: 'fim se'",
			"expecting: 'se', 'enquanto', 'fim enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', id",
			"expecting: 'passo', 'ate'",
			"expecting: 'se', 'enquanto', 'para', 'avalie', 'repita', 'leia', 'escreva', ':', id",
			"expecting: 'de', diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, xor, virgula, ';', ')', ':='",
			"expecting: fim, 'se', 'fim se', 'senao', 'enquanto', 'fim enquanto', 'para', 'fim para', 'avalie', 'fim avalie', 'caso', 'repita', 'ate', 'leia', 'escreva', id",
			"expecting: '*', '/', '+', '-', ')'",
			"expecting: 'se', 'fim se', 'enquanto', 'para', 'avalie', 'fim avalie', 'repita', 'leia', 'escreva', id",
			"expecting: 'ate'",
			"expecting: 'se', 'senao', 'enquanto', 'para', 'avalie', 'caso', 'repita', 'leia', 'escreva', id",
			"expecting: 'se', 'enquanto', 'para', 'fim para', 'avalie', 'repita', 'leia', 'escreva', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 5, 6, 6, 5, 6, 7, 1, 8, 8, 1, 8, 9, 8, 8, 10, 6, 11, 12, 13, 13, 13, 14, 14, 14, 14, 14, 15, 15, 16, 17, 18, 19, 16, 20, 21, 9, 1, 16, 22, 16, 1, 2, 13, 6, 6, 23, 23, 16, 24, 25, 26, 24, 27, 28, 28, 24, 9, 9, 29, 30, 26, 28, 7, 31, 32, 33, 31, 31, 8, 21, 30, 30, 34, 34, 35, 35, 35, 15, 36, 23, 24, 28, 37, 27, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 38, 39, 40, 9, 41, 9, 42, 20, 5, 15, 43, 32, 31, 15, 8, 15, 15, 16, 44, 45, 46, 24, 28, 28, 28, 28, 28, 28, 28, 26, 26, 26, 26, 28, 28, 28, 40, 15, 39, 15, 41, 29, 29, 9, 45, 9, 47, 9, 45, 15, 45, 45, 30, 45, 40, 45, 15, 48, 18, 49, 9, 47, 9, 47, 45, 45, 29, 9, 49, 47, 18, 50, 9, 9, 15, 50, 50, 9, 45, 15, 15, 50, 45, 45, 15, 45, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
