/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.*;
import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AVariosComandosParaCondComandoPara extends PCondComandoPara
{
    private final LinkedList<PComandoPara> _comandoPara_ = new LinkedList<PComandoPara>();

    public AVariosComandosParaCondComandoPara()
    {
        // Constructor
    }

    public AVariosComandosParaCondComandoPara(
        @SuppressWarnings("hiding") List<?> _comandoPara_)
    {
        // Constructor
        setComandoPara(_comandoPara_);

    }

    @Override
    public Object clone()
    {
        return new AVariosComandosParaCondComandoPara(
            cloneList(this._comandoPara_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVariosComandosParaCondComandoPara(this);
    }

    public LinkedList<PComandoPara> getComandoPara()
    {
        return this._comandoPara_;
    }

    public void setComandoPara(List<?> list)
    {
        for(PComandoPara e : this._comandoPara_)
        {
            e.parent(null);
        }
        this._comandoPara_.clear();

        for(Object obj_e : list)
        {
            PComandoPara e = (PComandoPara) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comandoPara_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comandoPara_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comandoPara_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PComandoPara> i = this._comandoPara_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComandoPara) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
