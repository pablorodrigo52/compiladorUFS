/* compilador_lexico.sable:
      Contem toda a descrição lexica da linguagem  
*/ 
Package compilador ; 
     
Helpers 
    /* Our helpers */ 
    
    // Definição de letras e numeros
    lowercase = ['a' .. 'z'] ;  /* abcdefghijklmnopqrstuvwxyz */
    uppercase = ['A' .. 'Z'] ;  /* ABCDEFGHIJKLMNOPQRSTUVWXYZ */
    num = ['0' .. '9'] ; /* 0123456789 */
     
    // Definição de caracteres especiais 
    space = ' ' ; //Espaço em branco
    under = '_' ;//Underline 
    bar = '/' ;
    barstar = '/*' ;
    lpar = '(' ;
    rpar = ')' ;
    
    //operadores lógicos
    greaterthan = '>' ;
    lessthan = '<' ;
    equal = '=' ;
    gore = '>=' ; // leia-se (g ou e) e não (gore)
    lore = '<=' ; // leia-se (l ou e) e não (lore)
    
    //operadores aritméticos
    sum = '+' ;
    subtraction = '-' ;
    multiplication = '*' ;
    // division = '/'   //precisamos perguntar se precisa definir a divisão porque ela tem a mesma barra que o helper 'bar'
    
    // operadores booleanos
    not = 'nao' ;
    and = 'e';
    or = 'ou'; 
    
    // caractere de nova linha e atribuição
    newline = 10 ; 
    att = ':=' ;
    
   
Tokens 
    /* Our simple token definition(s). */ 
   
   integer = num+ space*;
   real = num+,num*; //nao sei se ta certo
   identifier = (under|lowercase|uppercase) (lowercase*|uppercase*|under*)+ ;
   
  
Productions 
    /* Our super-simple grammar */ 
    