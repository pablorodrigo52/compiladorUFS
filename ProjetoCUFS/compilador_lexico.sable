/* compilador_lexico.sable:
      Contem toda a descrição lexica da linguagem  
*/ 
Package compilador ;
     
Helpers 
    /* Our helpers */ 
    
    // Definição de letras e numeros
    letra = ['a' .. 'z'] | ['A' .. 'Z'];  /* abcdefghijklmnopqrstuvwxyz */
    num = ['0' .. '9'] ; /* 0123456789 */
     
     
    // Definição de caracteres especiais 
 	spc = ' ' ; //Espaço em branco 
    under = '_' ; 
    virgula = ',' ;
    aspasimples = '''; 
    aspasduplas = '"'; 
    
    
    // caractere de nova linha e tabulacao, \n e \t
    cr = 13 ;
    nl = 10 ;
    tb = 9;

	// vazio representa simbolos em branco que devo ignorar
	vazio = (spc)+ ;
	// Caractere de tabulação
	tab = tb;
	// Caractere que representa \r ou \r\n (para quebra de linha) 
	rn = (cr | cr nl);

	nao = 'nao' ;
    e = 'e' ;
    ou = 'ou' ;

	maior = '>' ;
	menor = '<' ;
	igual = '=' ;

States
	normal, comentario_bloco;

Tokens 
    /* Our simple token definition(s). .... */
   
      //PALAVRAS RESERVADAS
   inicio = 'inicio' nl? ;
   fim = 'fim' nl? ;
   se = 'se' ;
   senao = 'senao' ;
   enquanto = 'enquanto' ;
   para = 'para' ;
   avalie = 'avalie' ;
   caso = 'caso' ;
   verdadeiro = 'verdadeiro' ;
   falso = 'falso';
   string = aspasimples (letra|num|vazio)+ aspasimples ;
   programa = 'programa' nl? ;
   leia = 'leia' ;
   escreva = 'escreva' ;
   constante = 'constante' ;
   
        //OPERADORES LÓGICOS
   diferente = menor maior; 
   maioreq = maior igual ;
   menorq = menor igual ;
   maior =  maior ;
   menor = menor ;
   igual = igual ;
   
    //OPERADORES ARITMÉTICOS
   mult = '*' ;
   div = '/' ;
   sum = '+' ;
   sub = '-' ;
   
	//OPERADORES BOOLEANOS
   nao = nao ;
   e = e ;
   ou = ou ;
   
     //TIPOS
   tipointeiro = 'inteiro' ;
   tiporeal = 'real' ;
   tipocaractere = 'caractere' ;
   tipobooleano = 'booleano' ; 
   
     //SIMBOLOS ESPECIAIS
   virgula 	= virgula ;
   ponto = '.' ; 
   pontoevirgula = ';' nl? ;
   fechablococomentario = '*/' nl? ;
   abreblococomentario = '/*' nl? ;
   doispontos = ':' ;
   comentariosimples = '//' ; 
   aparentese = '(' ;
   fparentese = ')' ;
   acolchete = '[' ;
   fcolchete = ']' ;
   atrib = '<-' ;
   aspasimples = aspasimples;
   aspasduplas = aspasduplas;  
   
   novalinha = nl;
   vazio = vazio ;
   tab = tab;
   rn = rn;
   
     //IDENTIFICADORES, INTEIRO, REAL
   id = (under|letra) (letra*|under*|num*)+ ;
   inteiro = num+ ;
   real = num+ virgula num+ ;
   
Ignored Tokens
	vazio, novalinha, tab, rn ;
	
Productions
	
	prog = {inicio} programa id inicio declaracoes comando fim ; //falta a parte de comando ainda, pra rodar, tem que tirar comando daqui..
	
	
	declaracoes = {declaracao_condicional} cond_declaracao? ; 
	cond_declaracao = {varias_declaracoes} declaracao+ ;
	declaracao = {variaveis} tipo doispontos var pontoevirgula 
			   | {vetores} vetor 
			   | {constante} constante id valor ; 
	
	
	tipo = {tint} tipointeiro | {tfloat} tiporeal | {tstr} tipocaractere | {tbool} tipobooleano ;
	var = {varias_variaveis} var virgula id
		| {identificador} id ;
	vetor = {vetor} tipo doispontos varvetor pontoevirgula ;
	varvetor = {varios_vetores} varvetor virgula id acolchete inteiro fcolchete
			 | {um_vetor} id acolchete inteiro fcolchete ; 
	valor = {int} inteiro | {float} real | {str} string | {bool} booleano ;
	booleano = {true} verdadeiro | {false} falso ;