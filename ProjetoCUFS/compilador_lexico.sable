/* compilador_lexico.sable:
      Contem toda a descrição lexica da linguagem  
*/ 
Package compilador ;
     
Helpers 
    /* Our helpers */ 
    
    // Definição de letras e numeros
    letra = ['a' .. 'z'] | ['A' .. 'Z'];  /* abcdefghijklmnopqrstuvwxyz */
    num = ['0' .. '9'] ; /* 0123456789 */
     
    string = ''' (letra|num)* ''' ;
     
    // Definição de caracteres especiais 
 	spc = ' ' ; //Espaço em branco 
    under = '_' ; 
    
    
    // caractere de nova linha e tabulacao, \n e \t
    cr = 13 ;
    nl = 10 ;
    tb = 9;

	// vazio representa simbolos em branco que devo ignorar
	vazio = (spc | tb | cr | cr nl)+ ;

Tokens 
    /* Our simple token definition(s). .... */
   
      //PALAVRAS RESERVADAS
   inicio = 'inicio' nl? ;
   fim = 'fim' nl? ;
   se = 'se' ;
   senao = 'senao' ;
   enquanto = 'enquanto' ;
   para = 'para' ;
   avalie = 'avalie' ;
   caso = 'caso' ;
   verdadeiro = 'verdadeiro' ;
   falso = 'falso';
   string = string ;
   
     //TIPOS
   tipointeiro = 'inteiro' ;
   tiporeal = 'real' ;
   tipocaractere = 'caractere' ;
   tipobooleano = 'booleano' ; 
   
     //SIMBOLOS ESPECIAIS
   pontoevirgula = ';' nl? ;
   fechabloco = '*/' nl? ;
   abrebloco = '/*' nl? ;
   doispontos = ':' ;
   coment = '//' ; 
   lpar = '(' ;
   rpar = ')' ;
   lcol = '[' ;
   rcol = ']' ;
   att = ':=' ;
   
   novalinha = nl;
   vazio = vazio ;
   tab = tb;
   
   
     //IDENTIFICADORES, INTEIRO, REAL
   id = (under|letra) (letra*|under*|num*)+ ;
   inteiro = num+ ;
   real = num+','num+ ;
  
     //OPERADORES LÓGICOS
   maiorq = '>=' ;
   menorq = '<=' ;
   maior =  '>' ;
   menor = '<' ;
   igual = '=' ;
   
    //OPERADORES ARITMÉTICOS
   mult = '*' ;
   div = '/' ;
   sum = '+' ;
   sub = '-' ;
   
	//OPERADORES BOOLEANOS
   nao = 'nao' ;
   e = 'e' ;
   ou = 'ou' ;
   
Ignored Tokens
	vazio, novalinha, tab ;