/* compilador_lexico.sable:
      Contem toda a descrição lexica da linguagem  
*/ 
Package compilador ; 
     
Helpers 
    /* Our helpers */ 
    
    // Definição de letras e numeros
    letra = ['a' .. 'z'] | ['A' .. 'Z'];  /* abcdefghijklmnopqrstuvwxyz */
    num = ['0' .. '9'] ; /* 0123456789 */
     
    // Definição de caracteres especiais 
    spc = ' ' ; //Espaço em branco
    
    // caractere de nova linha e atribuição
    newline = 10 ; 
    
   
Tokens 
    /* Our simple token definition(s). */ 
   
   //simbolos especiais
   coment = '//' ;
   abrebloco = '/*' ;
   fechabloco = '*/' ;
   under = '_' ; 
   lpar = '(' ;
   rpar = ')' ;
   lcol = '[' ;
   rcol = ']' ;
   att = ':=' ;
   endline = ';' newline? ; 
      
   //operadores lógicos
   greater =  '>' ;
   less = '<' ;
   eq = '=' ;
   gore = '>=' ; // leia-se (g ou e) e não (gore)
   lore = '<=' ; // leia-se (l ou e) e não (lore)
   
    //operadores aritméticos
   sum = '+' ;
   sub = '-' ;
   mult = '*' ;
   div = '/' ;

	//operadores booleanos
   not = 'nao' ;
   and = 'e' ;
   or = 'ou' ; 
   
   //identificador
   id = (under|letra) (letra*|under*)+ ;
   
   //numeros inteiros e reais  
   idint = num+ ;
   idreal = num+','num+ ;
   
   //TIPOS
   inteiro = 'inteiro' ;
   real = 'real' ;
   caractere = 'caractere' ;
   tipo = (inteiro|real|caractere) ; 
  
  
Productions 
    /* Our super-simple grammar */ 
    