/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.Analysis;

@SuppressWarnings("nls")
public final class AComandoSeComando extends PComando
{
    private PCondicaoSe _condicaoSe_;
    private PCausaSe _causaSe_;

    public AComandoSeComando()
    {
        // Constructor
    }

    public AComandoSeComando(
        @SuppressWarnings("hiding") PCondicaoSe _condicaoSe_,
        @SuppressWarnings("hiding") PCausaSe _causaSe_)
    {
        // Constructor
        setCondicaoSe(_condicaoSe_);

        setCausaSe(_causaSe_);

    }

    @Override
    public Object clone()
    {
        return new AComandoSeComando(
            cloneNode(this._condicaoSe_),
            cloneNode(this._causaSe_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAComandoSeComando(this);
    }

    public PCondicaoSe getCondicaoSe()
    {
        return this._condicaoSe_;
    }

    public void setCondicaoSe(PCondicaoSe node)
    {
        if(this._condicaoSe_ != null)
        {
            this._condicaoSe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._condicaoSe_ = node;
    }

    public PCausaSe getCausaSe()
    {
        return this._causaSe_;
    }

    public void setCausaSe(PCausaSe node)
    {
        if(this._causaSe_ != null)
        {
            this._causaSe_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._causaSe_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._condicaoSe_)
            + toString(this._causaSe_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._condicaoSe_ == child)
        {
            this._condicaoSe_ = null;
            return;
        }

        if(this._causaSe_ == child)
        {
            this._causaSe_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._condicaoSe_ == oldChild)
        {
            setCondicaoSe((PCondicaoSe) newChild);
            return;
        }

        if(this._causaSe_ == oldChild)
        {
            setCausaSe((PCausaSe) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
