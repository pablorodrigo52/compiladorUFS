/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AVetorVarOuVetor extends PVarOuVetor
{
    private TId _id_;
    private TAcolchete _acolchete_;
    private PPosicao _posicao_;
    private TFcolchete _fcolchete_;

    public AVetorVarOuVetor()
    {
        // Constructor
    }

    public AVetorVarOuVetor(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TAcolchete _acolchete_,
        @SuppressWarnings("hiding") PPosicao _posicao_,
        @SuppressWarnings("hiding") TFcolchete _fcolchete_)
    {
        // Constructor
        setId(_id_);

        setAcolchete(_acolchete_);

        setPosicao(_posicao_);

        setFcolchete(_fcolchete_);

    }

    @Override
    public Object clone()
    {
        return new AVetorVarOuVetor(
            cloneNode(this._id_),
            cloneNode(this._acolchete_),
            cloneNode(this._posicao_),
            cloneNode(this._fcolchete_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVetorVarOuVetor(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TAcolchete getAcolchete()
    {
        return this._acolchete_;
    }

    public void setAcolchete(TAcolchete node)
    {
        if(this._acolchete_ != null)
        {
            this._acolchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._acolchete_ = node;
    }

    public PPosicao getPosicao()
    {
        return this._posicao_;
    }

    public void setPosicao(PPosicao node)
    {
        if(this._posicao_ != null)
        {
            this._posicao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._posicao_ = node;
    }

    public TFcolchete getFcolchete()
    {
        return this._fcolchete_;
    }

    public void setFcolchete(TFcolchete node)
    {
        if(this._fcolchete_ != null)
        {
            this._fcolchete_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fcolchete_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._acolchete_)
            + toString(this._posicao_)
            + toString(this._fcolchete_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._acolchete_ == child)
        {
            this._acolchete_ = null;
            return;
        }

        if(this._posicao_ == child)
        {
            this._posicao_ = null;
            return;
        }

        if(this._fcolchete_ == child)
        {
            this._fcolchete_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._acolchete_ == oldChild)
        {
            setAcolchete((TAcolchete) newChild);
            return;
        }

        if(this._posicao_ == oldChild)
        {
            setPosicao((PPosicao) newChild);
            return;
        }

        if(this._fcolchete_ == oldChild)
        {
            setFcolchete((TFcolchete) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
