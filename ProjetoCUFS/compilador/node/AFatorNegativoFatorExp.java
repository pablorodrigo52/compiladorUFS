/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import compilador.analysis.*;

@SuppressWarnings("nls")
public final class AFatorNegativoFatorExp extends PFatorExp
{
    private TSub _sub_;
    private PFatorExp _fatorExp_;

    public AFatorNegativoFatorExp()
    {
        // Constructor
    }

    public AFatorNegativoFatorExp(
        @SuppressWarnings("hiding") TSub _sub_,
        @SuppressWarnings("hiding") PFatorExp _fatorExp_)
    {
        // Constructor
        setSub(_sub_);

        setFatorExp(_fatorExp_);

    }

    @Override
    public Object clone()
    {
        return new AFatorNegativoFatorExp(
            cloneNode(this._sub_),
            cloneNode(this._fatorExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFatorNegativoFatorExp(this);
    }

    public TSub getSub()
    {
        return this._sub_;
    }

    public void setSub(TSub node)
    {
        if(this._sub_ != null)
        {
            this._sub_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._sub_ = node;
    }

    public PFatorExp getFatorExp()
    {
        return this._fatorExp_;
    }

    public void setFatorExp(PFatorExp node)
    {
        if(this._fatorExp_ != null)
        {
            this._fatorExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fatorExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._sub_)
            + toString(this._fatorExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._sub_ == child)
        {
            this._sub_ = null;
            return;
        }

        if(this._fatorExp_ == child)
        {
            this._fatorExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._sub_ == oldChild)
        {
            setSub((TSub) newChild);
            return;
        }

        if(this._fatorExp_ == oldChild)
        {
            setFatorExp((PFatorExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
