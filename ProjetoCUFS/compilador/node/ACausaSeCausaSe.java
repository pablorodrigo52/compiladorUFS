/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.node;

import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;

import compilador.analysis.Analysis;

@SuppressWarnings("nls")
public final class ACausaSeCausaSe extends PCausaSe
{
    private final LinkedList<PComando> _comando_ = new LinkedList<PComando>();
    private PComandoSenao _comandoSenao_;

    public ACausaSeCausaSe()
    {
        // Constructor
    }

    public ACausaSeCausaSe(
        @SuppressWarnings("hiding") List<?> _comando_,
        @SuppressWarnings("hiding") PComandoSenao _comandoSenao_)
    {
        // Constructor
        setComando(_comando_);

        setComandoSenao(_comandoSenao_);

    }

    @Override
    public Object clone()
    {
        return new ACausaSeCausaSe(
            cloneList(this._comando_),
            cloneNode(this._comandoSenao_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACausaSeCausaSe(this);
    }

    public LinkedList<PComando> getComando()
    {
        return this._comando_;
    }

    public void setComando(List<?> list)
    {
        for(PComando e : this._comando_)
        {
            e.parent(null);
        }
        this._comando_.clear();

        for(Object obj_e : list)
        {
            PComando e = (PComando) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._comando_.add(e);
        }
    }

    public PComandoSenao getComandoSenao()
    {
        return this._comandoSenao_;
    }

    public void setComandoSenao(PComandoSenao node)
    {
        if(this._comandoSenao_ != null)
        {
            this._comandoSenao_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._comandoSenao_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._comando_)
            + toString(this._comandoSenao_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._comando_.remove(child))
        {
            return;
        }

        if(this._comandoSenao_ == child)
        {
            this._comandoSenao_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PComando> i = this._comando_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PComando) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._comandoSenao_ == oldChild)
        {
            setComandoSenao((PComandoSenao) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
