/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.parser;

import compilador.lexer.*;
import compilador.node.*;
import compilador.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProg node1 = (PProg) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AInicioProg */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAdeclaracaocondicionaldeclaracoes1Declaracoes */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AAdeclaracaocondicionaldeclaracoes2Declaracoes */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AVariasDeclaracoesCondDeclaracao */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVariaveisDeclaracao */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AVetoresDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AConstanteDeclaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAcomandocondicionalcomandos1Comandos */
            {
                ArrayList<Object> list = new7();
                push(goTo(4), list, false);
            }
            break;
            case 8: /* reduce AAcomandocondicionalcomandos2Comandos */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce AVariosComandosCondComando */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AAtribuicaoVariavelComando */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AAtribuicaoVetorComando */
            {
                ArrayList<Object> list = new11();
                push(goTo(6), list, false);
            }
            break;
            case 12: /* reduce AExpressaoExp */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AExpLogicaExp */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AExpressao */
            {
                ArrayList<Object> list = new14();
                push(goTo(8), list, false);
            }
            break;
            case 15: /* reduce AExpSomaExpressaoEsq */
            {
                ArrayList<Object> list = new15();
                push(goTo(9), list, false);
            }
            break;
            case 16: /* reduce AExpSubtracaoExpressaoEsq */
            {
                ArrayList<Object> list = new16();
                push(goTo(9), list, false);
            }
            break;
            case 17: /* reduce AExpDirExpressaoEsq */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce AExpressaoDirMultiplicacaoExpressaoDir */
            {
                ArrayList<Object> list = new18();
                push(goTo(10), list, false);
            }
            break;
            case 19: /* reduce AExpressaoDirDivisaoExpressaoDir */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce AExpressaoDirFatorExpressaoDir */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AFatorAninhadoFatorExp */
            {
                ArrayList<Object> list = new21();
                push(goTo(11), list, false);
            }
            break;
            case 22: /* reduce AFatorVariavelFatorExp */
            {
                ArrayList<Object> list = new22();
                push(goTo(11), list, false);
            }
            break;
            case 23: /* reduce AFatorVetorFatorExp */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AFatorNegativoFatorExp */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AFatorCoeficienteFatorExp */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce AExpLogica */
            {
                ArrayList<Object> list = new26();
                push(goTo(12), list, false);
            }
            break;
            case 27: /* reduce AExpeEExpLogicaEsq */
            {
                ArrayList<Object> list = new27();
                push(goTo(13), list, false);
            }
            break;
            case 28: /* reduce AExpeOuExpLogicaEsq */
            {
                ArrayList<Object> list = new28();
                push(goTo(13), list, false);
            }
            break;
            case 29: /* reduce AExpeDirExpLogicaEsq */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list, false);
            }
            break;
            case 30: /* reduce AExpLogicaAninhadaExpLogicaDir */
            {
                ArrayList<Object> list = new30();
                push(goTo(14), list, false);
            }
            break;
            case 31: /* reduce AExpeNaoExpLogicaDir */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list, false);
            }
            break;
            case 32: /* reduce AExpLogicaFatorExpLogicaDir */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list, false);
            }
            break;
            case 33: /* reduce AExpeIgualExpLogicaFator */
            {
                ArrayList<Object> list = new33();
                push(goTo(15), list, false);
            }
            break;
            case 34: /* reduce AExpeDiferenteExpLogicaFator */
            {
                ArrayList<Object> list = new34();
                push(goTo(15), list, false);
            }
            break;
            case 35: /* reduce AExpeMaiorExpLogicaFator */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list, false);
            }
            break;
            case 36: /* reduce AExpeMenorExpLogicaFator */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AExpeMaioreqExpLogicaFator */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce AExpeMenoreqExpLogicaFator */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list, false);
            }
            break;
            case 39: /* reduce ATintTipo */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce ATfloatTipo */
            {
                ArrayList<Object> list = new40();
                push(goTo(16), list, false);
            }
            break;
            case 41: /* reduce ATstrTipo */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list, false);
            }
            break;
            case 42: /* reduce ATboolTipo */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list, false);
            }
            break;
            case 43: /* reduce AVariasVariaveisVar */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list, false);
            }
            break;
            case 44: /* reduce AIdentificadorVar */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list, false);
            }
            break;
            case 45: /* reduce AVetorVetor */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list, false);
            }
            break;
            case 46: /* reduce AVariosVetoresVarvetor */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list, false);
            }
            break;
            case 47: /* reduce AUmVetorVarvetor */
            {
                ArrayList<Object> list = new47();
                push(goTo(19), list, false);
            }
            break;
            case 48: /* reduce AIntValor */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce AFloatValor */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce AStrValor */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list, false);
            }
            break;
            case 51: /* reduce ABoolValor */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce ATrueBooleano */
            {
                ArrayList<Object> list = new52();
                push(goTo(21), list, false);
            }
            break;
            case 53: /* reduce AFalseBooleano */
            {
                ArrayList<Object> list = new53();
                push(goTo(21), list, false);
            }
            break;
            case 54: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list, true);
            }
            break;
            case 55: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list, true);
            }
            break;
            case 56: /* reduce ATerminal$Comando */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list, true);
            }
            break;
            case 57: /* reduce ANonTerminal$Comando */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AInicioProg */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProg pprogNode1;
        {
            // Block
        TPrograma tprogramaNode2;
        TId tidNode3;
        TInicio tinicioNode4;
        PDeclaracoes pdeclaracoesNode5;
        PComandos pcomandosNode6;
        TFim tfimNode7;
        tprogramaNode2 = (TPrograma)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tinicioNode4 = (TInicio)nodeArrayList3.get(0);
        pdeclaracoesNode5 = (PDeclaracoes)nodeArrayList4.get(0);
        pcomandosNode6 = (PComandos)nodeArrayList5.get(0);
        tfimNode7 = (TFim)nodeArrayList6.get(0);

        pprogNode1 = new AInicioProg(tprogramaNode2, tidNode3, tinicioNode4, pdeclaracoesNode5, pcomandosNode6, tfimNode7);
        }
	nodeList.add(pprogNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAdeclaracaocondicionaldeclaracoes1Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pdeclaracoesNode1 = new ADeclaracaoCondicionalDeclaracoes(null);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAdeclaracaocondicionaldeclaracoes2Declaracoes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracoes pdeclaracoesNode1;
        {
            // Block
        PCondDeclaracao pconddeclaracaoNode2;
        pconddeclaracaoNode2 = (PCondDeclaracao)nodeArrayList1.get(0);

        pdeclaracoesNode1 = new ADeclaracaoCondicionalDeclaracoes(pconddeclaracaoNode2);
        }
	nodeList.add(pdeclaracoesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AVariasDeclaracoesCondDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondDeclaracao pconddeclaracaoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pconddeclaracaoNode1 = new AVariasDeclaracoesCondDeclaracao(listNode3);
        }
	nodeList.add(pconddeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVariaveisDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVar pvarNode4;
        TPontoevirgula tpontoevirgulaNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pvarNode4 = (PVar)nodeArrayList3.get(0);
        tpontoevirgulaNode5 = (TPontoevirgula)nodeArrayList4.get(0);

        pdeclaracaoNode1 = new AVariaveisDeclaracao(ptipoNode2, tdoispontosNode3, pvarNode4, tpontoevirgulaNode5);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVetoresDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        PVetor pvetorNode2;
        pvetorNode2 = (PVetor)nodeArrayList1.get(0);

        pdeclaracaoNode1 = new AVetoresDeclaracao(pvetorNode2);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AConstanteDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeclaracao pdeclaracaoNode1;
        {
            // Block
        TConstante tconstanteNode2;
        TId tidNode3;
        PValor pvalorNode4;
        tconstanteNode2 = (TConstante)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pvalorNode4 = (PValor)nodeArrayList3.get(0);

        pdeclaracaoNode1 = new AConstanteDeclaracao(tconstanteNode2, tidNode3, pvalorNode4);
        }
	nodeList.add(pdeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAcomandocondicionalcomandos1Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PComandos pcomandosNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;

        pcomandosNode1 = new AComandoCondicionalComandos(null);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAcomandocondicionalcomandos2Comandos */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComandos pcomandosNode1;
        {
            // Block
        PCondComando pcondcomandoNode2;
        pcondcomandoNode2 = (PCondComando)nodeArrayList1.get(0);

        pcomandosNode1 = new AComandoCondicionalComandos(pcondcomandoNode2);
        }
	nodeList.add(pcomandosNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVariosComandosCondComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCondComando pcondcomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pcondcomandoNode1 = new AVariosComandosCondComando(listNode3);
        }
	nodeList.add(pcondcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAtribuicaoVariavelComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVar pvarNode2;
        TAtrib tatribNode3;
        PExp pexpNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tatribNode3 = (TAtrib)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoVariavelComando(pvarNode2, tatribNode3, pexpNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAtribuicaoVetorComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComando pcomandoNode1;
        {
            // Block
        PVarvetor pvarvetorNode2;
        TAtrib tatribNode3;
        PExp pexpNode4;
        pvarvetorNode2 = (PVarvetor)nodeArrayList1.get(0);
        tatribNode3 = (TAtrib)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);

        pcomandoNode1 = new AAtribuicaoVetorComando(pvarvetorNode2, tatribNode3, pexpNode4);
        }
	nodeList.add(pcomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AExpressaoExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpressao pexpressaoNode2;
        pexpressaoNode2 = (PExpressao)nodeArrayList1.get(0);

        pexpNode1 = new AExpressaoExp(pexpressaoNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AExpLogicaExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PExpLogica pexplogicaNode2;
        pexplogicaNode2 = (PExpLogica)nodeArrayList1.get(0);

        pexpNode1 = new AExpLogicaExp(pexplogicaNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AExpressao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressao pexpressaoNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);

        pexpressaoNode1 = new AExpressao(pexpressaoesqNode2);
        }
	nodeList.add(pexpressaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AExpSomaExpressaoEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoEsq pexpressaoesqNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TSum tsumNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tsumNode3 = (TSum)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexpressaoesqNode1 = new AExpSomaExpressaoEsq(pexpressaoesqNode2, tsumNode3, pexpressaodirNode4);
        }
	nodeList.add(pexpressaoesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AExpSubtracaoExpressaoEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoEsq pexpressaoesqNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TSub tsubNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tsubNode3 = (TSub)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexpressaoesqNode1 = new AExpSubtracaoExpressaoEsq(pexpressaoesqNode2, tsubNode3, pexpressaodirNode4);
        }
	nodeList.add(pexpressaoesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AExpDirExpressaoEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoEsq pexpressaoesqNode1;
        {
            // Block
        PExpressaoDir pexpressaodirNode2;
        pexpressaodirNode2 = (PExpressaoDir)nodeArrayList1.get(0);

        pexpressaoesqNode1 = new AExpDirExpressaoEsq(pexpressaodirNode2);
        }
	nodeList.add(pexpressaoesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AExpressaoDirMultiplicacaoExpressaoDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoDir pexpressaodirNode1;
        {
            // Block
        PExpressaoDir pexpressaodirNode2;
        TMult tmultNode3;
        PFatorExp pfatorexpNode4;
        pexpressaodirNode2 = (PExpressaoDir)nodeArrayList1.get(0);
        tmultNode3 = (TMult)nodeArrayList2.get(0);
        pfatorexpNode4 = (PFatorExp)nodeArrayList3.get(0);

        pexpressaodirNode1 = new AExpressaoDirMultiplicacaoExpressaoDir(pexpressaodirNode2, tmultNode3, pfatorexpNode4);
        }
	nodeList.add(pexpressaodirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AExpressaoDirDivisaoExpressaoDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoDir pexpressaodirNode1;
        {
            // Block
        PExpressaoDir pexpressaodirNode2;
        TDiv tdivNode3;
        PFatorExp pfatorexpNode4;
        pexpressaodirNode2 = (PExpressaoDir)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pfatorexpNode4 = (PFatorExp)nodeArrayList3.get(0);

        pexpressaodirNode1 = new AExpressaoDirDivisaoExpressaoDir(pexpressaodirNode2, tdivNode3, pfatorexpNode4);
        }
	nodeList.add(pexpressaodirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AExpressaoDirFatorExpressaoDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpressaoDir pexpressaodirNode1;
        {
            // Block
        PFatorExp pfatorexpNode2;
        pfatorexpNode2 = (PFatorExp)nodeArrayList1.get(0);

        pexpressaodirNode1 = new AExpressaoDirFatorExpressaoDir(pfatorexpNode2);
        }
	nodeList.add(pexpressaodirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFatorAninhadoFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorExp pfatorexpNode1;
        {
            // Block
        TAparentese taparenteseNode2;
        PFatorExp pfatorexpNode3;
        TFparentese tfparenteseNode4;
        taparenteseNode2 = (TAparentese)nodeArrayList1.get(0);
        pfatorexpNode3 = (PFatorExp)nodeArrayList2.get(0);
        tfparenteseNode4 = (TFparentese)nodeArrayList3.get(0);

        pfatorexpNode1 = new AFatorAninhadoFatorExp(taparenteseNode2, pfatorexpNode3, tfparenteseNode4);
        }
	nodeList.add(pfatorexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AFatorVariavelFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorExp pfatorexpNode1;
        {
            // Block
        PVar pvarNode2;
        pvarNode2 = (PVar)nodeArrayList1.get(0);

        pfatorexpNode1 = new AFatorVariavelFatorExp(pvarNode2);
        }
	nodeList.add(pfatorexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFatorVetorFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorExp pfatorexpNode1;
        {
            // Block
        PVarvetor pvarvetorNode2;
        pvarvetorNode2 = (PVarvetor)nodeArrayList1.get(0);

        pfatorexpNode1 = new AFatorVetorFatorExp(pvarvetorNode2);
        }
	nodeList.add(pfatorexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFatorNegativoFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorExp pfatorexpNode1;
        {
            // Block
        TSub tsubNode2;
        PFatorExp pfatorexpNode3;
        tsubNode2 = (TSub)nodeArrayList1.get(0);
        pfatorexpNode3 = (PFatorExp)nodeArrayList2.get(0);

        pfatorexpNode1 = new AFatorNegativoFatorExp(tsubNode2, pfatorexpNode3);
        }
	nodeList.add(pfatorexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AFatorCoeficienteFatorExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFatorExp pfatorexpNode1;
        {
            // Block
        PValor pvalorNode2;
        pvalorNode2 = (PValor)nodeArrayList1.get(0);

        pfatorexpNode1 = new AFatorCoeficienteFatorExp(pvalorNode2);
        }
	nodeList.add(pfatorexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AExpLogica */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogica pexplogicaNode1;
        {
            // Block
        PExpLogicaEsq pexplogicaesqNode2;
        pexplogicaesqNode2 = (PExpLogicaEsq)nodeArrayList1.get(0);

        pexplogicaNode1 = new AExpLogica(pexplogicaesqNode2);
        }
	nodeList.add(pexplogicaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AExpeEExpLogicaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaEsq pexplogicaesqNode1;
        {
            // Block
        PExpLogicaEsq pexplogicaesqNode2;
        TE teNode3;
        PExpLogicaDir pexplogicadirNode4;
        pexplogicaesqNode2 = (PExpLogicaEsq)nodeArrayList1.get(0);
        teNode3 = (TE)nodeArrayList2.get(0);
        pexplogicadirNode4 = (PExpLogicaDir)nodeArrayList3.get(0);

        pexplogicaesqNode1 = new AExpeEExpLogicaEsq(pexplogicaesqNode2, teNode3, pexplogicadirNode4);
        }
	nodeList.add(pexplogicaesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AExpeOuExpLogicaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaEsq pexplogicaesqNode1;
        {
            // Block
        PExpLogicaEsq pexplogicaesqNode2;
        TOu touNode3;
        PExpLogicaDir pexplogicadirNode4;
        pexplogicaesqNode2 = (PExpLogicaEsq)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexplogicadirNode4 = (PExpLogicaDir)nodeArrayList3.get(0);

        pexplogicaesqNode1 = new AExpeOuExpLogicaEsq(pexplogicaesqNode2, touNode3, pexplogicadirNode4);
        }
	nodeList.add(pexplogicaesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AExpeDirExpLogicaEsq */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaEsq pexplogicaesqNode1;
        {
            // Block
        PExpLogicaDir pexplogicadirNode2;
        pexplogicadirNode2 = (PExpLogicaDir)nodeArrayList1.get(0);

        pexplogicaesqNode1 = new AExpeDirExpLogicaEsq(pexplogicadirNode2);
        }
	nodeList.add(pexplogicaesqNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AExpLogicaAninhadaExpLogicaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaDir pexplogicadirNode1;
        {
            // Block
        TAparentese taparenteseNode2;
        PExpLogicaEsq pexplogicaesqNode3;
        TFparentese tfparenteseNode4;
        taparenteseNode2 = (TAparentese)nodeArrayList1.get(0);
        pexplogicaesqNode3 = (PExpLogicaEsq)nodeArrayList2.get(0);
        tfparenteseNode4 = (TFparentese)nodeArrayList3.get(0);

        pexplogicadirNode1 = new AExpLogicaAninhadaExpLogicaDir(taparenteseNode2, pexplogicaesqNode3, tfparenteseNode4);
        }
	nodeList.add(pexplogicadirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpeNaoExpLogicaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaDir pexplogicadirNode1;
        {
            // Block
        TNao tnaoNode2;
        PExpLogicaDir pexplogicadirNode3;
        tnaoNode2 = (TNao)nodeArrayList1.get(0);
        pexplogicadirNode3 = (PExpLogicaDir)nodeArrayList2.get(0);

        pexplogicadirNode1 = new AExpeNaoExpLogicaDir(tnaoNode2, pexplogicadirNode3);
        }
	nodeList.add(pexplogicadirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AExpLogicaFatorExpLogicaDir */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaDir pexplogicadirNode1;
        {
            // Block
        PExpLogicaFator pexplogicafatorNode2;
        pexplogicafatorNode2 = (PExpLogicaFator)nodeArrayList1.get(0);

        pexplogicadirNode1 = new AExpLogicaFatorExpLogicaDir(pexplogicafatorNode2);
        }
	nodeList.add(pexplogicadirNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AExpeIgualExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TIgual tigualNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tigualNode3 = (TIgual)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeIgualExpLogicaFator(pexpressaoesqNode2, tigualNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AExpeDiferenteExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TDiferente tdiferenteNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tdiferenteNode3 = (TDiferente)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeDiferenteExpLogicaFator(pexpressaoesqNode2, tdiferenteNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpeMaiorExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TMaior tmaiorNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tmaiorNode3 = (TMaior)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeMaiorExpLogicaFator(pexpressaoesqNode2, tmaiorNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AExpeMenorExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TMenor tmenorNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tmenorNode3 = (TMenor)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeMenorExpLogicaFator(pexpressaoesqNode2, tmenorNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpeMaioreqExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TMaioreq tmaioreqNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tmaioreqNode3 = (TMaioreq)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeMaioreqExpLogicaFator(pexpressaoesqNode2, tmaioreqNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExpeMenoreqExpLogicaFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpLogicaFator pexplogicafatorNode1;
        {
            // Block
        PExpressaoEsq pexpressaoesqNode2;
        TMenorq tmenorqNode3;
        PExpressaoDir pexpressaodirNode4;
        pexpressaoesqNode2 = (PExpressaoEsq)nodeArrayList1.get(0);
        tmenorqNode3 = (TMenorq)nodeArrayList2.get(0);
        pexpressaodirNode4 = (PExpressaoDir)nodeArrayList3.get(0);

        pexplogicafatorNode1 = new AExpeMenoreqExpLogicaFator(pexpressaoesqNode2, tmenorqNode3, pexpressaodirNode4);
        }
	nodeList.add(pexplogicafatorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ATintTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipointeiro ttipointeiroNode2;
        ttipointeiroNode2 = (TTipointeiro)nodeArrayList1.get(0);

        ptipoNode1 = new ATintTipo(ttipointeiroNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ATfloatTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTiporeal ttiporealNode2;
        ttiporealNode2 = (TTiporeal)nodeArrayList1.get(0);

        ptipoNode1 = new ATfloatTipo(ttiporealNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ATstrTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipocaractere ttipocaractereNode2;
        ttipocaractereNode2 = (TTipocaractere)nodeArrayList1.get(0);

        ptipoNode1 = new ATstrTipo(ttipocaractereNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ATboolTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTipo ptipoNode1;
        {
            // Block
        TTipobooleano ttipobooleanoNode2;
        ttipobooleanoNode2 = (TTipobooleano)nodeArrayList1.get(0);

        ptipoNode1 = new ATboolTipo(ttipobooleanoNode2);
        }
	nodeList.add(ptipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AVariasVariaveisVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        PVar pvarNode2;
        TVirgula tvirgulaNode3;
        TId tidNode4;
        pvarNode2 = (PVar)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);

        pvarNode1 = new AVariasVariaveisVar(pvarNode2, tvirgulaNode3, tidNode4);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AIdentificadorVar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVar pvarNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pvarNode1 = new AIdentificadorVar(tidNode2);
        }
	nodeList.add(pvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AVetorVetor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVetor pvetorNode1;
        {
            // Block
        PTipo ptipoNode2;
        TDoispontos tdoispontosNode3;
        PVarvetor pvarvetorNode4;
        TPontoevirgula tpontoevirgulaNode5;
        ptipoNode2 = (PTipo)nodeArrayList1.get(0);
        tdoispontosNode3 = (TDoispontos)nodeArrayList2.get(0);
        pvarvetorNode4 = (PVarvetor)nodeArrayList3.get(0);
        tpontoevirgulaNode5 = (TPontoevirgula)nodeArrayList4.get(0);

        pvetorNode1 = new AVetorVetor(ptipoNode2, tdoispontosNode3, pvarvetorNode4, tpontoevirgulaNode5);
        }
	nodeList.add(pvetorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AVariosVetoresVarvetor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarvetor pvarvetorNode1;
        {
            // Block
        PVarvetor pvarvetorNode2;
        TVirgula tvirgulaNode3;
        TId tidNode4;
        TAcolchete tacolcheteNode5;
        TInteiro tinteiroNode6;
        TFcolchete tfcolcheteNode7;
        pvarvetorNode2 = (PVarvetor)nodeArrayList1.get(0);
        tvirgulaNode3 = (TVirgula)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tacolcheteNode5 = (TAcolchete)nodeArrayList4.get(0);
        tinteiroNode6 = (TInteiro)nodeArrayList5.get(0);
        tfcolcheteNode7 = (TFcolchete)nodeArrayList6.get(0);

        pvarvetorNode1 = new AVariosVetoresVarvetor(pvarvetorNode2, tvirgulaNode3, tidNode4, tacolcheteNode5, tinteiroNode6, tfcolcheteNode7);
        }
	nodeList.add(pvarvetorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AUmVetorVarvetor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarvetor pvarvetorNode1;
        {
            // Block
        TId tidNode2;
        TAcolchete tacolcheteNode3;
        TInteiro tinteiroNode4;
        TFcolchete tfcolcheteNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tacolcheteNode3 = (TAcolchete)nodeArrayList2.get(0);
        tinteiroNode4 = (TInteiro)nodeArrayList3.get(0);
        tfcolcheteNode5 = (TFcolchete)nodeArrayList4.get(0);

        pvarvetorNode1 = new AUmVetorVarvetor(tidNode2, tacolcheteNode3, tinteiroNode4, tfcolcheteNode5);
        }
	nodeList.add(pvarvetorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIntValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        pvalorNode1 = new AIntValor(tinteiroNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AFloatValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        pvalorNode1 = new AFloatValor(trealNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AStrValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalorNode1 = new AStrValor(tstringNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ABoolValor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValor pvalorNode1;
        {
            // Block
        PBooleano pbooleanoNode2;
        pbooleanoNode2 = (PBooleano)nodeArrayList1.get(0);

        pvalorNode1 = new ABoolValor(pbooleanoNode2);
        }
	nodeList.add(pvalorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ATrueBooleano */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleano pbooleanoNode1;
        {
            // Block
        TVerdadeiro tverdadeiroNode2;
        tverdadeiroNode2 = (TVerdadeiro)nodeArrayList1.get(0);

        pbooleanoNode1 = new ATrueBooleano(tverdadeiroNode2);
        }
	nodeList.add(pbooleanoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AFalseBooleano */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBooleano pbooleanoNode1;
        {
            // Block
        TFalso tfalsoNode2;
        tfalsoNode2 = (TFalso)nodeArrayList1.get(0);

        pbooleanoNode1 = new AFalseBooleano(tfalsoNode2);
        }
	nodeList.add(pbooleanoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PDeclaracao pdeclaracaoNode1;
        pdeclaracaoNode1 = (PDeclaracao)nodeArrayList1.get(0);
	if(pdeclaracaoNode1 != null)
	{
	  listNode2.add(pdeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PDeclaracao pdeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pdeclaracaoNode2 = (PDeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pdeclaracaoNode2 != null)
	{
	  listNode3.add(pdeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ATerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PComando pcomandoNode1;
        pcomandoNode1 = (PComando)nodeArrayList1.get(0);
	if(pcomandoNode1 != null)
	{
	  listNode2.add(pcomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANonTerminal$Comando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PComando pcomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcomandoNode2 = (PComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcomandoNode2 != null)
	{
	  listNode3.add(pcomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {11, SHIFT, 1}, },
			{{-1, ERROR, 1}, {46, SHIFT, 3}, },
			{{-1, ERROR, 2}, {49, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {0, SHIFT, 4}, },
			{{-1, REDUCE, 1}, {14, SHIFT, 5}, {28, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {31, SHIFT, 9}, },
			{{-1, ERROR, 5}, {46, SHIFT, 16}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 41}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 7}, {46, SHIFT, 17}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 13}, {37, SHIFT, 24}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 3}, {14, SHIFT, 5}, {28, SHIFT, 6}, {29, SHIFT, 7}, {30, SHIFT, 8}, {31, SHIFT, 9}, },
			{{-1, ERROR, 16}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, REDUCE, 44}, {41, SHIFT, 33}, },
			{{-1, ERROR, 18}, {1, SHIFT, 34}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 56}, },
			{{-1, ERROR, 21}, {32, SHIFT, 35}, {43, SHIFT, 36}, },
			{{-1, ERROR, 22}, {32, SHIFT, 37}, {43, SHIFT, 38}, },
			{{-1, REDUCE, 9}, {46, SHIFT, 17}, },
			{{-1, ERROR, 24}, {46, SHIFT, 17}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 33}, {47, SHIFT, 42}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 35}, {46, SHIFT, 43}, },
			{{-1, ERROR, 36}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 37}, {46, SHIFT, 59}, },
			{{-1, ERROR, 38}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 40}, {32, SHIFT, 35}, {34, SHIFT, 61}, },
			{{-1, ERROR, 41}, {32, SHIFT, 37}, {34, SHIFT, 62}, },
			{{-1, ERROR, 42}, {42, SHIFT, 63}, },
			{{-1, REDUCE, 43}, },
			{{-1, ERROR, 44}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 45}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 46}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 14}, {15, SHIFT, 70}, {16, SHIFT, 71}, {17, SHIFT, 72}, {18, SHIFT, 73}, {19, SHIFT, 74}, {20, SHIFT, 75}, {23, SHIFT, 76}, {24, SHIFT, 77}, },
			{{-1, REDUCE, 17}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 26}, {26, SHIFT, 80}, {27, SHIFT, 81}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 22}, {32, SHIFT, 35}, },
			{{-1, REDUCE, 23}, {32, SHIFT, 37}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 59}, {41, SHIFT, 82}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 64}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 66}, {15, SHIFT, 70}, {16, SHIFT, 71}, {17, SHIFT, 72}, {18, SHIFT, 73}, {19, SHIFT, 74}, {20, SHIFT, 75}, {23, SHIFT, 76}, {24, SHIFT, 77}, },
			{{-1, REDUCE, 31}, },
			{{-1, REDUCE, 20}, {40, SHIFT, 84}, },
			{{-1, ERROR, 69}, {26, SHIFT, 80}, {27, SHIFT, 81}, {40, SHIFT, 85}, },
			{{-1, ERROR, 70}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 71}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 72}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 73}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 74}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 75}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 76}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 77}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 78}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 79}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {39, SHIFT, 64}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 80}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 81}, {8, SHIFT, 26}, {9, SHIFT, 27}, {10, SHIFT, 28}, {24, SHIFT, 44}, {25, SHIFT, 45}, {39, SHIFT, 46}, {46, SHIFT, 17}, {47, SHIFT, 29}, {48, SHIFT, 30}, },
			{{-1, ERROR, 82}, {47, SHIFT, 98}, },
			{{-1, ERROR, 83}, {40, SHIFT, 84}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 34}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 37}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 38}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 35}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 36}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 33}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 15}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 16}, {21, SHIFT, 78}, {22, SHIFT, 79}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 98}, {42, SHIFT, 99}, },
			{{-1, REDUCE, 46}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 10}, },
			{{-1, 11}, },
			{{-1, 12}, {15, 25}, },
			{{-1, 18}, },
			{{-1, 19}, },
			{{-1, 20}, {23, 39}, },
			{{-1, 47}, {38, 60}, },
			{{-1, 48}, },
			{{-1, 66}, {36, 49}, {38, 49}, },
			{{-1, 50}, {70, 86}, {71, 87}, {72, 88}, {73, 89}, {74, 90}, {75, 91}, {76, 92}, {77, 93}, },
			{{-1, 51}, {44, 65}, {46, 68}, {64, 83}, {78, 94}, {79, 95}, },
			{{-1, 52}, },
			{{-1, 53}, {46, 69}, },
			{{-1, 54}, {45, 67}, {80, 96}, {81, 97}, },
			{{-1, 55}, },
			{{-1, 13}, },
			{{-1, 56}, {10, 21}, {23, 21}, {24, 40}, },
			{{-1, 14}, },
			{{-1, 57}, {10, 22}, {23, 22}, {24, 41}, },
			{{-1, 58}, {16, 31}, },
			{{-1, 32}, },
			{{-1, 15}, },
			{{-1, 23}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: programa",
			"expecting: id",
			"expecting: EOF",
			"expecting: inicio",
			"expecting: fim, 'constante', 'inteiro', 'real', 'caractere', 'booleano', id",
			"expecting: ':'",
			"expecting: fim, id",
			"expecting: 'verdadeiro', 'falso', string, inteiro, real",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, virgula, pontoevirgula, ')', '[', '<-', id",
			"expecting: fim",
			"expecting: virgula, '<-'",
			"expecting: fim, 'constante', diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, 'inteiro', 'real', 'caractere', 'booleano', ')', id",
			"expecting: inteiro",
			"expecting: 'verdadeiro', 'falso', string, '-', nao, '(', id, inteiro, real",
			"expecting: virgula, pontoevirgula",
			"expecting: ']'",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, virgula, pontoevirgula, ')', '<-', id",
			"expecting: 'verdadeiro', 'falso', string, '-', '(', id, inteiro, real",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '+', '-', id",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', id",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, ')', id",
			"expecting: fim, e, ou, id",
			"expecting: fim, e, ou, ')', id",
			"expecting: fim, diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', e, ou, virgula, ')', id",
			"expecting: '['",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '+', '-'",
			"expecting: diferente, maioreq, menorq, maior, menor, igual, '*', '/', '+', '-', ')'",
			"expecting: e, ou, ')'",
			"expecting: ')'",
			"expecting: fim, '*', '/', e, ou, ')', id",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 5, 5, 5, 5, 6, 6, 4, 5, 4, 4, 7, 8, 9, 9, 6, 10, 10, 6, 1, 4, 11, 11, 11, 11, 11, 4, 11, 12, 2, 1, 13, 1, 13, 6, 14, 14, 15, 16, 17, 13, 13, 6, 6, 18, 19, 20, 6, 21, 22, 22, 23, 23, 20, 24, 6, 4, 4, 16, 17, 20, 25, 22, 26, 27, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 13, 13, 12, 28, 20, 22, 29, 29, 29, 29, 29, 29, 19, 19, 20, 20, 22, 22, 15, 16, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
