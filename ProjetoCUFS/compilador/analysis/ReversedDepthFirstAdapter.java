/* This file was generated by SableCC (http://www.sablecc.org/). */

package compilador.analysis;

import java.util.*;
import compilador.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProg().apply(this);
        outStart(node);
    }

    public void inAInicioProg(AInicioProg node)
    {
        defaultIn(node);
    }

    public void outAInicioProg(AInicioProg node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInicioProg(AInicioProg node)
    {
        inAInicioProg(node);
        if(node.getFim() != null)
        {
            node.getFim().apply(this);
        }
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getInicio() != null)
        {
            node.getInicio().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getPrograma() != null)
        {
            node.getPrograma().apply(this);
        }
        outAInicioProg(node);
    }

    public void inADeclaracaoCondicionalDeclaracoes(ADeclaracaoCondicionalDeclaracoes node)
    {
        defaultIn(node);
    }

    public void outADeclaracaoCondicionalDeclaracoes(ADeclaracaoCondicionalDeclaracoes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclaracaoCondicionalDeclaracoes(ADeclaracaoCondicionalDeclaracoes node)
    {
        inADeclaracaoCondicionalDeclaracoes(node);
        if(node.getCondDeclaracao() != null)
        {
            node.getCondDeclaracao().apply(this);
        }
        outADeclaracaoCondicionalDeclaracoes(node);
    }

    public void inAVariasDeclaracoesCondDeclaracao(AVariasDeclaracoesCondDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariasDeclaracoesCondDeclaracao(AVariasDeclaracoesCondDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariasDeclaracoesCondDeclaracao(AVariasDeclaracoesCondDeclaracao node)
    {
        inAVariasDeclaracoesCondDeclaracao(node);
        {
            List<PDeclaracao> copy = new ArrayList<PDeclaracao>(node.getDeclaracao());
            Collections.reverse(copy);
            for(PDeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAVariasDeclaracoesCondDeclaracao(node);
    }

    public void inAVariaveisDeclaracao(AVariaveisDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAVariaveisDeclaracao(AVariaveisDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariaveisDeclaracao(AVariaveisDeclaracao node)
    {
        inAVariaveisDeclaracao(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getTipo() != null)
        {
            node.getTipo().apply(this);
        }
        outAVariaveisDeclaracao(node);
    }

    public void inAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        defaultIn(node);
    }

    public void outAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAConstanteDeclaracao(AConstanteDeclaracao node)
    {
        inAConstanteDeclaracao(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getConstante() != null)
        {
            node.getConstante().apply(this);
        }
        outAConstanteDeclaracao(node);
    }

    public void inAVariasVariaveisVar(AVariasVariaveisVar node)
    {
        defaultIn(node);
    }

    public void outAVariasVariaveisVar(AVariasVariaveisVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariasVariaveisVar(AVariasVariaveisVar node)
    {
        inAVariasVariaveisVar(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVirgula() != null)
        {
            node.getVirgula().apply(this);
        }
        if(node.getVarOuVetor() != null)
        {
            node.getVarOuVetor().apply(this);
        }
        outAVariasVariaveisVar(node);
    }

    public void inAUmaVariavelVar(AUmaVariavelVar node)
    {
        defaultIn(node);
    }

    public void outAUmaVariavelVar(AUmaVariavelVar node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAUmaVariavelVar(AUmaVariavelVar node)
    {
        inAUmaVariavelVar(node);
        if(node.getVarOuVetor() != null)
        {
            node.getVarOuVetor().apply(this);
        }
        outAUmaVariavelVar(node);
    }

    public void inAVariavelVarOuVetor(AVariavelVarOuVetor node)
    {
        defaultIn(node);
    }

    public void outAVariavelVarOuVetor(AVariavelVarOuVetor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariavelVarOuVetor(AVariavelVarOuVetor node)
    {
        inAVariavelVarOuVetor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVariavelVarOuVetor(node);
    }

    public void inAVetorVarOuVetor(AVetorVarOuVetor node)
    {
        defaultIn(node);
    }

    public void outAVetorVarOuVetor(AVetorVarOuVetor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVetorVarOuVetor(AVetorVarOuVetor node)
    {
        inAVetorVarOuVetor(node);
        if(node.getFcolchete() != null)
        {
            node.getFcolchete().apply(this);
        }
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        if(node.getAcolchete() != null)
        {
            node.getAcolchete().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAVetorVarOuVetor(node);
    }

    public void inAComandoCondicionalComandos(AComandoCondicionalComandos node)
    {
        defaultIn(node);
    }

    public void outAComandoCondicionalComandos(AComandoCondicionalComandos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCondicionalComandos(AComandoCondicionalComandos node)
    {
        inAComandoCondicionalComandos(node);
        if(node.getCondComando() != null)
        {
            node.getCondComando().apply(this);
        }
        outAComandoCondicionalComandos(node);
    }

    public void inAVariosComandosCondComando(AVariosComandosCondComando node)
    {
        defaultIn(node);
    }

    public void outAVariosComandosCondComando(AVariosComandosCondComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosComandosCondComando(AVariosComandosCondComando node)
    {
        inAVariosComandosCondComando(node);
        {
            List<PComando> copy = new ArrayList<PComando>(node.getComando());
            Collections.reverse(copy);
            for(PComando e : copy)
            {
                e.apply(this);
            }
        }
        outAVariosComandosCondComando(node);
    }

    public void inAAtribuicaoVariavelComando(AAtribuicaoVariavelComando node)
    {
        defaultIn(node);
    }

    public void outAAtribuicaoVariavelComando(AAtribuicaoVariavelComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAtribuicaoVariavelComando(AAtribuicaoVariavelComando node)
    {
        inAAtribuicaoVariavelComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAtrib() != null)
        {
            node.getAtrib().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAAtribuicaoVariavelComando(node);
    }

    public void inAComandoLeiaComando(AComandoLeiaComando node)
    {
        defaultIn(node);
    }

    public void outAComandoLeiaComando(AComandoLeiaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoLeiaComando(AComandoLeiaComando node)
    {
        inAComandoLeiaComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        if(node.getLeia() != null)
        {
            node.getLeia().apply(this);
        }
        outAComandoLeiaComando(node);
    }

    public void inAComandoEscrevaComando(AComandoEscrevaComando node)
    {
        defaultIn(node);
    }

    public void outAComandoEscrevaComando(AComandoEscrevaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEscrevaComando(AComandoEscrevaComando node)
    {
        inAComandoEscrevaComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        if(node.getEscreva() != null)
        {
            node.getEscreva().apply(this);
        }
        outAComandoEscrevaComando(node);
    }

    public void inAComandoSeComando(AComandoSeComando node)
    {
        defaultIn(node);
    }

    public void outAComandoSeComando(AComandoSeComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSeComando(AComandoSeComando node)
    {
        inAComandoSeComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFimse() != null)
        {
            node.getFimse().apply(this);
        }
        if(node.getCausaSe() != null)
        {
            node.getCausaSe().apply(this);
        }
        if(node.getEntao() != null)
        {
            node.getEntao().apply(this);
        }
        if(node.getCondicaoSe() != null)
        {
            node.getCondicaoSe().apply(this);
        }
        if(node.getSe() != null)
        {
            node.getSe().apply(this);
        }
        outAComandoSeComando(node);
    }

    public void inAComandoAvalieComando(AComandoAvalieComando node)
    {
        defaultIn(node);
    }

    public void outAComandoAvalieComando(AComandoAvalieComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoAvalieComando(AComandoAvalieComando node)
    {
        inAComandoAvalieComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFimavalie() != null)
        {
            node.getFimavalie().apply(this);
        }
        if(node.getCasosAvalie() != null)
        {
            node.getCasosAvalie().apply(this);
        }
        if(node.getCondicaoAvalie() != null)
        {
            node.getCondicaoAvalie().apply(this);
        }
        if(node.getAvalie() != null)
        {
            node.getAvalie().apply(this);
        }
        outAComandoAvalieComando(node);
    }

    public void inAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        defaultIn(node);
    }

    public void outAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoEnquantoComando(AComandoEnquantoComando node)
    {
        inAComandoEnquantoComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFimenquanto() != null)
        {
            node.getFimenquanto().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getCondicaoSe() != null)
        {
            node.getCondicaoSe().apply(this);
        }
        if(node.getEnquanto() != null)
        {
            node.getEnquanto().apply(this);
        }
        outAComandoEnquantoComando(node);
    }

    public void inAComandoRepitaComando(AComandoRepitaComando node)
    {
        defaultIn(node);
    }

    public void outAComandoRepitaComando(AComandoRepitaComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoRepitaComando(AComandoRepitaComando node)
    {
        inAComandoRepitaComando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getCondicaoSe() != null)
        {
            node.getCondicaoSe().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getRepita() != null)
        {
            node.getRepita().apply(this);
        }
        outAComandoRepitaComando(node);
    }

    public void inAComandoPara1Comando(AComandoPara1Comando node)
    {
        defaultIn(node);
    }

    public void outAComandoPara1Comando(AComandoPara1Comando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPara1Comando(AComandoPara1Comando node)
    {
        inAComandoPara1Comando(node);
        if(node.getFour() != null)
        {
            node.getFour().apply(this);
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getThird() != null)
        {
            node.getThird().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandoPara() != null)
        {
            node.getComandoPara().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getSecond() != null)
        {
            node.getSecond().apply(this);
        }
        if(node.getAte() != null)
        {
            node.getAte().apply(this);
        }
        if(node.getFrist() != null)
        {
            node.getFrist().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoPara1Comando(node);
    }

    public void inAComandoPara2Comando(AComandoPara2Comando node)
    {
        defaultIn(node);
    }

    public void outAComandoPara2Comando(AComandoPara2Comando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoPara2Comando(AComandoPara2Comando node)
    {
        inAComandoPara2Comando(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getFimpara() != null)
        {
            node.getFimpara().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getFaca() != null)
        {
            node.getFaca().apply(this);
        }
        if(node.getSixth() != null)
        {
            node.getSixth().apply(this);
        }
        if(node.getPasso() != null)
        {
            node.getPasso().apply(this);
        }
        if(node.getFifth() != null)
        {
            node.getFifth().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        outAComandoPara2Comando(node);
    }

    public void inACondicaoSeCondicaoSe(ACondicaoSeCondicaoSe node)
    {
        defaultIn(node);
    }

    public void outACondicaoSeCondicaoSe(ACondicaoSeCondicaoSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoSeCondicaoSe(ACondicaoSeCondicaoSe node)
    {
        inACondicaoSeCondicaoSe(node);
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        outACondicaoSeCondicaoSe(node);
    }

    public void inACausaSeCausaSe(ACausaSeCausaSe node)
    {
        defaultIn(node);
    }

    public void outACausaSeCausaSe(ACausaSeCausaSe node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACausaSeCausaSe(ACausaSeCausaSe node)
    {
        inACausaSeCausaSe(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        outACausaSeCausaSe(node);
    }

    public void inAComandoSenaoSeComandoSenao(AComandoSenaoSeComandoSenao node)
    {
        defaultIn(node);
    }

    public void outAComandoSenaoSeComandoSenao(AComandoSenaoSeComandoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenaoSeComandoSenao(AComandoSenaoSeComandoSenao node)
    {
        inAComandoSenaoSeComandoSenao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAComandoSenaoSeComandoSenao(node);
    }

    public void inAComandoSenaoAvalieComandoSenao(AComandoSenaoAvalieComandoSenao node)
    {
        defaultIn(node);
    }

    public void outAComandoSenaoAvalieComandoSenao(AComandoSenaoAvalieComandoSenao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoSenaoAvalieComandoSenao(AComandoSenaoAvalieComandoSenao node)
    {
        inAComandoSenaoAvalieComandoSenao(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getSenao() != null)
        {
            node.getSenao().apply(this);
        }
        outAComandoSenaoAvalieComandoSenao(node);
    }

    public void inACondicaoAvalie(ACondicaoAvalie node)
    {
        defaultIn(node);
    }

    public void outACondicaoAvalie(ACondicaoAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondicaoAvalie(ACondicaoAvalie node)
    {
        inACondicaoAvalie(node);
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        outACondicaoAvalie(node);
    }

    public void inACasosAvalie(ACasosAvalie node)
    {
        defaultIn(node);
    }

    public void outACasosAvalie(ACasosAvalie node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACasosAvalie(ACasosAvalie node)
    {
        inACasosAvalie(node);
        if(node.getComandoSenao() != null)
        {
            node.getComandoSenao().apply(this);
        }
        if(node.getCondComandoCasos() != null)
        {
            node.getCondComandoCasos().apply(this);
        }
        outACasosAvalie(node);
    }

    public void inAVariosCasesCondComandoCasos(AVariosCasesCondComandoCasos node)
    {
        defaultIn(node);
    }

    public void outAVariosCasesCondComandoCasos(AVariosCasesCondComandoCasos node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosCasesCondComandoCasos(AVariosCasesCondComandoCasos node)
    {
        inAVariosCasesCondComandoCasos(node);
        {
            List<PComandoCaso> copy = new ArrayList<PComandoCaso>(node.getComandoCaso());
            Collections.reverse(copy);
            for(PComandoCaso e : copy)
            {
                e.apply(this);
            }
        }
        outAVariosCasesCondComandoCasos(node);
    }

    public void inAComandoCaseComandoCaso(AComandoCaseComandoCaso node)
    {
        defaultIn(node);
    }

    public void outAComandoCaseComandoCaso(AComandoCaseComandoCaso node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoCaseComandoCaso(AComandoCaseComandoCaso node)
    {
        inAComandoCaseComandoCaso(node);
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        if(node.getComandos() != null)
        {
            node.getComandos().apply(this);
        }
        if(node.getDoispontos() != null)
        {
            node.getDoispontos().apply(this);
        }
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        if(node.getCaso() != null)
        {
            node.getCaso().apply(this);
        }
        outAComandoCaseComandoCaso(node);
    }

    public void inAVariosComandosParaCondComandoPara(AVariosComandosParaCondComandoPara node)
    {
        defaultIn(node);
    }

    public void outAVariosComandosParaCondComandoPara(AVariosComandosParaCondComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVariosComandosParaCondComandoPara(AVariosComandosParaCondComandoPara node)
    {
        inAVariosComandosParaCondComandoPara(node);
        {
            List<PComandoPara> copy = new ArrayList<PComandoPara>(node.getComandoPara());
            Collections.reverse(copy);
            for(PComandoPara e : copy)
            {
                e.apply(this);
            }
        }
        outAVariosComandosParaCondComandoPara(node);
    }

    public void inAComandoParaComandoPara(AComandoParaComandoPara node)
    {
        defaultIn(node);
    }

    public void outAComandoParaComandoPara(AComandoParaComandoPara node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComandoParaComandoPara(AComandoParaComandoPara node)
    {
        inAComandoParaComandoPara(node);
        if(node.getPontoevirgula() != null)
        {
            node.getPontoevirgula().apply(this);
        }
        if(node.getComando() != null)
        {
            node.getComando().apply(this);
        }
        outAComandoParaComandoPara(node);
    }

    public void inAExpressaoExp(AExpressaoExp node)
    {
        defaultIn(node);
    }

    public void outAExpressaoExp(AExpressaoExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoExp(AExpressaoExp node)
    {
        inAExpressaoExp(node);
        if(node.getExpressao() != null)
        {
            node.getExpressao().apply(this);
        }
        outAExpressaoExp(node);
    }

    public void inAExpLogicaExp(AExpLogicaExp node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaExp(AExpLogicaExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaExp(AExpLogicaExp node)
    {
        inAExpLogicaExp(node);
        if(node.getExpLogica() != null)
        {
            node.getExpLogica().apply(this);
        }
        outAExpLogicaExp(node);
    }

    public void inAExpEsqExpressao(AExpEsqExpressao node)
    {
        defaultIn(node);
    }

    public void outAExpEsqExpressao(AExpEsqExpressao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpEsqExpressao(AExpEsqExpressao node)
    {
        inAExpEsqExpressao(node);
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpEsqExpressao(node);
    }

    public void inAExpSomaExpressaoEsq(AExpSomaExpressaoEsq node)
    {
        defaultIn(node);
    }

    public void outAExpSomaExpressaoEsq(AExpSomaExpressaoEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSomaExpressaoEsq(AExpSomaExpressaoEsq node)
    {
        inAExpSomaExpressaoEsq(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getSum() != null)
        {
            node.getSum().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpSomaExpressaoEsq(node);
    }

    public void inAExpSubtracaoExpressaoEsq(AExpSubtracaoExpressaoEsq node)
    {
        defaultIn(node);
    }

    public void outAExpSubtracaoExpressaoEsq(AExpSubtracaoExpressaoEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpSubtracaoExpressaoEsq(AExpSubtracaoExpressaoEsq node)
    {
        inAExpSubtracaoExpressaoEsq(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpSubtracaoExpressaoEsq(node);
    }

    public void inAExpDirExpressaoEsq(AExpDirExpressaoEsq node)
    {
        defaultIn(node);
    }

    public void outAExpDirExpressaoEsq(AExpDirExpressaoEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpDirExpressaoEsq(AExpDirExpressaoEsq node)
    {
        inAExpDirExpressaoEsq(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        outAExpDirExpressaoEsq(node);
    }

    public void inAExpressaoDirMultiplicacaoExpressaoDir(AExpressaoDirMultiplicacaoExpressaoDir node)
    {
        defaultIn(node);
    }

    public void outAExpressaoDirMultiplicacaoExpressaoDir(AExpressaoDirMultiplicacaoExpressaoDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoDirMultiplicacaoExpressaoDir(AExpressaoDirMultiplicacaoExpressaoDir node)
    {
        inAExpressaoDirMultiplicacaoExpressaoDir(node);
        if(node.getExpressaoFator() != null)
        {
            node.getExpressaoFator().apply(this);
        }
        if(node.getMult() != null)
        {
            node.getMult().apply(this);
        }
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        outAExpressaoDirMultiplicacaoExpressaoDir(node);
    }

    public void inAExpressaoDirDivisaoExpressaoDir(AExpressaoDirDivisaoExpressaoDir node)
    {
        defaultIn(node);
    }

    public void outAExpressaoDirDivisaoExpressaoDir(AExpressaoDirDivisaoExpressaoDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoDirDivisaoExpressaoDir(AExpressaoDirDivisaoExpressaoDir node)
    {
        inAExpressaoDirDivisaoExpressaoDir(node);
        if(node.getExpressaoFator() != null)
        {
            node.getExpressaoFator().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        outAExpressaoDirDivisaoExpressaoDir(node);
    }

    public void inAExpressaoDirFatorExpressaoDir(AExpressaoDirFatorExpressaoDir node)
    {
        defaultIn(node);
    }

    public void outAExpressaoDirFatorExpressaoDir(AExpressaoDirFatorExpressaoDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpressaoDirFatorExpressaoDir(AExpressaoDirFatorExpressaoDir node)
    {
        inAExpressaoDirFatorExpressaoDir(node);
        if(node.getExpressaoFator() != null)
        {
            node.getExpressaoFator().apply(this);
        }
        outAExpressaoDirFatorExpressaoDir(node);
    }

    public void inAFatorAninhadoExpressaoFator(AFatorAninhadoExpressaoFator node)
    {
        defaultIn(node);
    }

    public void outAFatorAninhadoExpressaoFator(AFatorAninhadoExpressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorAninhadoExpressaoFator(AFatorAninhadoExpressaoFator node)
    {
        inAFatorAninhadoExpressaoFator(node);
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getExpressaoFator() != null)
        {
            node.getExpressaoFator().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        outAFatorAninhadoExpressaoFator(node);
    }

    public void inAFatorVariavelExpressaoFator(AFatorVariavelExpressaoFator node)
    {
        defaultIn(node);
    }

    public void outAFatorVariavelExpressaoFator(AFatorVariavelExpressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorVariavelExpressaoFator(AFatorVariavelExpressaoFator node)
    {
        inAFatorVariavelExpressaoFator(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAFatorVariavelExpressaoFator(node);
    }

    public void inAFatorNegativoExpressaoFator(AFatorNegativoExpressaoFator node)
    {
        defaultIn(node);
    }

    public void outAFatorNegativoExpressaoFator(AFatorNegativoExpressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorNegativoExpressaoFator(AFatorNegativoExpressaoFator node)
    {
        inAFatorNegativoExpressaoFator(node);
        if(node.getExpressaoFator() != null)
        {
            node.getExpressaoFator().apply(this);
        }
        if(node.getSub() != null)
        {
            node.getSub().apply(this);
        }
        outAFatorNegativoExpressaoFator(node);
    }

    public void inAFatorCoeficienteExpressaoFator(AFatorCoeficienteExpressaoFator node)
    {
        defaultIn(node);
    }

    public void outAFatorCoeficienteExpressaoFator(AFatorCoeficienteExpressaoFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFatorCoeficienteExpressaoFator(AFatorCoeficienteExpressaoFator node)
    {
        inAFatorCoeficienteExpressaoFator(node);
        if(node.getValor() != null)
        {
            node.getValor().apply(this);
        }
        outAFatorCoeficienteExpressaoFator(node);
    }

    public void inAExpLogEsqExpLogica(AExpLogEsqExpLogica node)
    {
        defaultIn(node);
    }

    public void outAExpLogEsqExpLogica(AExpLogEsqExpLogica node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogEsqExpLogica(AExpLogEsqExpLogica node)
    {
        inAExpLogEsqExpLogica(node);
        if(node.getExpLogicaEsq() != null)
        {
            node.getExpLogicaEsq().apply(this);
        }
        outAExpLogEsqExpLogica(node);
    }

    public void inAExpeEExpLogicaEsq(AExpeEExpLogicaEsq node)
    {
        defaultIn(node);
    }

    public void outAExpeEExpLogicaEsq(AExpeEExpLogicaEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeEExpLogicaEsq(AExpeEExpLogicaEsq node)
    {
        inAExpeEExpLogicaEsq(node);
        if(node.getExpLogicaDir() != null)
        {
            node.getExpLogicaDir().apply(this);
        }
        if(node.getE() != null)
        {
            node.getE().apply(this);
        }
        if(node.getExpLogicaEsq() != null)
        {
            node.getExpLogicaEsq().apply(this);
        }
        outAExpeEExpLogicaEsq(node);
    }

    public void inAExpeOuExpLogicaEsq(AExpeOuExpLogicaEsq node)
    {
        defaultIn(node);
    }

    public void outAExpeOuExpLogicaEsq(AExpeOuExpLogicaEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeOuExpLogicaEsq(AExpeOuExpLogicaEsq node)
    {
        inAExpeOuExpLogicaEsq(node);
        if(node.getExpLogicaDir() != null)
        {
            node.getExpLogicaDir().apply(this);
        }
        if(node.getOu() != null)
        {
            node.getOu().apply(this);
        }
        if(node.getExpLogicaEsq() != null)
        {
            node.getExpLogicaEsq().apply(this);
        }
        outAExpeOuExpLogicaEsq(node);
    }

    public void inAExpeDirExpLogicaEsq(AExpeDirExpLogicaEsq node)
    {
        defaultIn(node);
    }

    public void outAExpeDirExpLogicaEsq(AExpeDirExpLogicaEsq node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeDirExpLogicaEsq(AExpeDirExpLogicaEsq node)
    {
        inAExpeDirExpLogicaEsq(node);
        if(node.getExpLogicaDir() != null)
        {
            node.getExpLogicaDir().apply(this);
        }
        outAExpeDirExpLogicaEsq(node);
    }

    public void inAExpLogicaAninhadaExpLogicaDir(AExpLogicaAninhadaExpLogicaDir node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaAninhadaExpLogicaDir(AExpLogicaAninhadaExpLogicaDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaAninhadaExpLogicaDir(AExpLogicaAninhadaExpLogicaDir node)
    {
        inAExpLogicaAninhadaExpLogicaDir(node);
        if(node.getFparentese() != null)
        {
            node.getFparentese().apply(this);
        }
        if(node.getExpLogicaEsq() != null)
        {
            node.getExpLogicaEsq().apply(this);
        }
        if(node.getAparentese() != null)
        {
            node.getAparentese().apply(this);
        }
        outAExpLogicaAninhadaExpLogicaDir(node);
    }

    public void inAExpeNaoExpLogicaDir(AExpeNaoExpLogicaDir node)
    {
        defaultIn(node);
    }

    public void outAExpeNaoExpLogicaDir(AExpeNaoExpLogicaDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeNaoExpLogicaDir(AExpeNaoExpLogicaDir node)
    {
        inAExpeNaoExpLogicaDir(node);
        if(node.getExpLogicaDir() != null)
        {
            node.getExpLogicaDir().apply(this);
        }
        if(node.getNao() != null)
        {
            node.getNao().apply(this);
        }
        outAExpeNaoExpLogicaDir(node);
    }

    public void inAExpLogicaFatorExpLogicaDir(AExpLogicaFatorExpLogicaDir node)
    {
        defaultIn(node);
    }

    public void outAExpLogicaFatorExpLogicaDir(AExpLogicaFatorExpLogicaDir node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpLogicaFatorExpLogicaDir(AExpLogicaFatorExpLogicaDir node)
    {
        inAExpLogicaFatorExpLogicaDir(node);
        if(node.getExpLogicaFator() != null)
        {
            node.getExpLogicaFator().apply(this);
        }
        outAExpLogicaFatorExpLogicaDir(node);
    }

    public void inAExpeIgualExpLogicaFator(AExpeIgualExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeIgualExpLogicaFator(AExpeIgualExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeIgualExpLogicaFator(AExpeIgualExpLogicaFator node)
    {
        inAExpeIgualExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getIgual() != null)
        {
            node.getIgual().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeIgualExpLogicaFator(node);
    }

    public void inAExpeDiferenteExpLogicaFator(AExpeDiferenteExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeDiferenteExpLogicaFator(AExpeDiferenteExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeDiferenteExpLogicaFator(AExpeDiferenteExpLogicaFator node)
    {
        inAExpeDiferenteExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getDiferente() != null)
        {
            node.getDiferente().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeDiferenteExpLogicaFator(node);
    }

    public void inAExpeMaiorExpLogicaFator(AExpeMaiorExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeMaiorExpLogicaFator(AExpeMaiorExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeMaiorExpLogicaFator(AExpeMaiorExpLogicaFator node)
    {
        inAExpeMaiorExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getMaior() != null)
        {
            node.getMaior().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeMaiorExpLogicaFator(node);
    }

    public void inAExpeMenorExpLogicaFator(AExpeMenorExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeMenorExpLogicaFator(AExpeMenorExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeMenorExpLogicaFator(AExpeMenorExpLogicaFator node)
    {
        inAExpeMenorExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getMenor() != null)
        {
            node.getMenor().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeMenorExpLogicaFator(node);
    }

    public void inAExpeMaioreqExpLogicaFator(AExpeMaioreqExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeMaioreqExpLogicaFator(AExpeMaioreqExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeMaioreqExpLogicaFator(AExpeMaioreqExpLogicaFator node)
    {
        inAExpeMaioreqExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getMaioreq() != null)
        {
            node.getMaioreq().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeMaioreqExpLogicaFator(node);
    }

    public void inAExpeMenoreqExpLogicaFator(AExpeMenoreqExpLogicaFator node)
    {
        defaultIn(node);
    }

    public void outAExpeMenoreqExpLogicaFator(AExpeMenoreqExpLogicaFator node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpeMenoreqExpLogicaFator(AExpeMenoreqExpLogicaFator node)
    {
        inAExpeMenoreqExpLogicaFator(node);
        if(node.getExpressaoDir() != null)
        {
            node.getExpressaoDir().apply(this);
        }
        if(node.getMenorq() != null)
        {
            node.getMenorq().apply(this);
        }
        if(node.getExpressaoEsq() != null)
        {
            node.getExpressaoEsq().apply(this);
        }
        outAExpeMenoreqExpLogicaFator(node);
    }

    public void inATintTipo(ATintTipo node)
    {
        defaultIn(node);
    }

    public void outATintTipo(ATintTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATintTipo(ATintTipo node)
    {
        inATintTipo(node);
        if(node.getTipointeiro() != null)
        {
            node.getTipointeiro().apply(this);
        }
        outATintTipo(node);
    }

    public void inATfloatTipo(ATfloatTipo node)
    {
        defaultIn(node);
    }

    public void outATfloatTipo(ATfloatTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATfloatTipo(ATfloatTipo node)
    {
        inATfloatTipo(node);
        if(node.getTiporeal() != null)
        {
            node.getTiporeal().apply(this);
        }
        outATfloatTipo(node);
    }

    public void inATstrTipo(ATstrTipo node)
    {
        defaultIn(node);
    }

    public void outATstrTipo(ATstrTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATstrTipo(ATstrTipo node)
    {
        inATstrTipo(node);
        if(node.getTipocaractere() != null)
        {
            node.getTipocaractere().apply(this);
        }
        outATstrTipo(node);
    }

    public void inATboolTipo(ATboolTipo node)
    {
        defaultIn(node);
    }

    public void outATboolTipo(ATboolTipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATboolTipo(ATboolTipo node)
    {
        inATboolTipo(node);
        if(node.getTipobooleano() != null)
        {
            node.getTipobooleano().apply(this);
        }
        outATboolTipo(node);
    }

    public void inAIntValor(AIntValor node)
    {
        defaultIn(node);
    }

    public void outAIntValor(AIntValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntValor(AIntValor node)
    {
        inAIntValor(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAIntValor(node);
    }

    public void inAFloatValor(AFloatValor node)
    {
        defaultIn(node);
    }

    public void outAFloatValor(AFloatValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFloatValor(AFloatValor node)
    {
        inAFloatValor(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAFloatValor(node);
    }

    public void inAStrValor(AStrValor node)
    {
        defaultIn(node);
    }

    public void outAStrValor(AStrValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStrValor(AStrValor node)
    {
        inAStrValor(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStrValor(node);
    }

    public void inABoolValor(ABoolValor node)
    {
        defaultIn(node);
    }

    public void outABoolValor(ABoolValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolValor(ABoolValor node)
    {
        inABoolValor(node);
        if(node.getBooleano() != null)
        {
            node.getBooleano().apply(this);
        }
        outABoolValor(node);
    }

    public void inACharValor(ACharValor node)
    {
        defaultIn(node);
    }

    public void outACharValor(ACharValor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharValor(ACharValor node)
    {
        inACharValor(node);
        if(node.getCaractere() != null)
        {
            node.getCaractere().apply(this);
        }
        outACharValor(node);
    }
}
